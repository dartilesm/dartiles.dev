[{"id":"621660b9cb0223001ecb4b8b","uuid":"53646ca6-624b-4498-9104-34bc183cdf5b","title":"How to use Stitches in Vue or Nuxt","slug":"how-to-use-stitches-in-vue-nuxt","html":"<p>If you came here, you will know that <a href=\"https://stitches.dev/\"><strong>stitches</strong></a> does not have a vue-friendly package like <strong>@stitches/react</strong> in react, however, it have <strong>@stitches/core</strong> that is framework agnostic.</p><p>In this post we will learn about how to use Stitches with @stitches/core package directly and through a vue-stitches too.</p><blockquote>At the moment when I write this post, the latest version is 1.2.6, so I'll use that version in the examples.</blockquote><p>To get started, obviously we have to install it. If you want know how to do this, click <a href=\"https://stitches.dev/docs/framework-agnostic\">here</a>.</p><h2 id=\"making-the-theme-and-css\"><strong>Making the theme and css</strong></h2><p>The theme is not very important to use stitches in vue, so you can skip this step. For the other persons that's wants to know how to do its, I'll explain to you.</p><p>You need to create a config file that contains the main settings of your theme likes utils, variables, media, etc. And export <code>css</code> function to use it in your components. Let see an example:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">//stitches.config.js\n\nimport { createStitches } from \"@stitches/core\";\n\nexport const { css } = createStitches({\n  theme: {\n    colors: {\n      primary: \"orange\"\n    }\n  },\n  prefix: \"coco\",\n  utils: {\n    myCustomColor: (value) =&gt; ({\n      backgroundColor: value,\n      color: \"black\"\n    })\n  },\n  media: {\n    md: \"(max-width: 640px)\"\n  }\n});</code></pre><figcaption>This is only an example you can put your own config or skip this step</figcaption></figure><pre><code class=\"language-javascript\">// Button.styles.js\n\nimport { css } from \"../../stitches.config.js\";\n// If you do not have a stitches.config.js you can import css directly from package\n// import { css } from \"@stitches/core\";\n\nexport const buttonStyles = css({\n  backgroundColor: \"blue\",\n  borderRadius: \"9999px\",\n  fontSize: \"13px\",\n  lineHeight: \"1\",\n  fontWeight: 500,\n  paddingTop: \"10px\",\n  paddingBottom: \"10px\",\n  paddingLeft: \"16px\",\n  paddingRight: \"16px\",\n  border: \"0\",\n  \"@md\": {\n    myCustomColor: \"purple\"\n  },\n  \"&amp;:hover\": {\n    transform: \"translateY(-2px)\",\n    boxShadow: \"0 10px 25px rgba(0, 0, 0, .3)\"\n  },\n  variants: {\n    color: {\n      orange: {\n        backgroundColor: \"orange\"\n      }\n    }\n  }\n});</code></pre><h2 id=\"using-stitches-core-directly\"><strong>Using @stitches/core directly</strong></h2><p>To use <code>css</code> function in our vue components we have many alternatives. Let's see some of them:</p><pre><code class=\"language-javascript\">// Button.vue\n\n&lt;template&gt;\n  &lt;button :class=\"buttonStyles\"&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { buttonStyles } from \"./Button.styles.js\";\n\nexport default {\n  name: \"Button\",\n  data: () =&gt; ({\n    buttonStyles: buttonStyles().className,\n  }),\n};\n&lt;/script&gt;</code></pre><p>Perfect, but... What about variants? How can I use it?</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">// Button.vue\n\n&lt;template&gt;\n  &lt;button :class=\"buttonStyles\"&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { buttonStyles } from \"./Button.styles.js\";\n\nexport default {\n  name: \"Button\",\n  data: () =&gt; ({\n    buttonStyles: buttonStyles({ color: \"orange\" }).className,\n  }),\n};\n&lt;/script&gt;</code></pre><figcaption>The <code>css</code> function return another function that receive an object with the variants</figcaption></figure><p>We can pass an object with any variants we want. Also you can pass props from the main component.</p><p>As you can see, this is not a friendly way to use with Vue if we compare it to React.<br><br>Let's remember with React we can create components directly with <code>styled</code> function and use variants with props in the element/component. Is there something similar in Vue?<br><br>The answer is, actually not but there is a friendly way with vue 🙂. <strong>Let's take a look at <code>vue-stitches</code></strong></p><h2 id=\"using-vue-stitches-alpha-version-\"><strong>Using vue-stitches (Alpha version)</strong></h2><p>I am currently working with stitches in a Vue project and I did notice the experience is not very well to me, so I create a <strong>vue-friendly package to use stitches.</strong></p><p>Let's see what we can do with it</p><h3 id=\"installation\"><strong>Installation</strong></h3><!--kg-card-begin: markdown--><p><code>npm install vue-stitches@latest</code><br>\nor<br>\n<code>yarn add vue-stitches@latest</code></p>\n<!--kg-card-end: markdown--><h3 id=\"usage\"><strong>Usage</strong></h3><p>To use the directive we need to use it as plugin. Let's see an example in Vue 2, Vue 3 and Nuxt.</p><h4 id=\"vue-2-and-vue-3\"><strong>Vue 2 and Vue 3</strong></h4><p>Use it in the file where you mount the app as plugin</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import Vue from \"vue\";\nimport App from \"./App.vue\";\nimport VueStitches from \"vue-stitches\";\n\nVue.use(VueStitches);\nnew Vue({\n  el: \"#app\",\n  render: (h) =&gt; h(App)\n});</code></pre><figcaption>Vue 2</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport VueStitches from \"vue-stitches\";\n\nconst app = createApp(App);\napp.use(VueStitches);\napp.mount(\"#app\");</code></pre><figcaption>Vue 3</figcaption></figure><h4 id=\"nuxt\"><strong>Nuxt</strong></h4><p>Create a file in <strong>plugins</strong> folders and add it to plugin property at <strong>nuxt.config.js.</strong></p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import Vue from \"vue\";\nimport VueStitches from \"vue-stitches\";\n\nVue.use(VueStitches);</code></pre><figcaption>plugins/vue-stitches.js</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">plugins: ['~/plugins/vue-stitches.js']</code></pre><figcaption>nuxt.config.js</figcaption></figure><h3 id=\"using-vue-stitches-in-our-components\"><strong>Using vue-stitches in our components</strong></h3><p>To use it, we need to add <strong>v-stitches</strong> directive in the element or component what  you want. </p><p><strong>The directive expect an array with two position,</strong> the first one <strong><code>css</code> function reference</strong> and the second is an <strong>object with variants that you need.</strong></p><blockquote>You can pass css function reference directly if you won't need to use variants</blockquote><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">// Button.vue\n\n&lt;template&gt;\n  &lt;button v-stitches=\"[buttonStyles, { color }]\"&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/button&gt;\n  &lt;button v-stitches=\"buttonStyles\" /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { buttonStyles } from \"./Button.styles.js\";\n\nexport default {\n  name: \"Button\",\n  data: () =&gt; ({\n    color: 'orange',\n    buttonStyles\n  }),\n};\n&lt;/script&gt;</code></pre><figcaption>Using stitches through vue-stitches</figcaption></figure><p>That's all, I know is not the best way to use stitches in vue, but I have good news, I working to improve it, so stay tuned in <strong><a href=\"https://github.com/dartilesm/vue-stitches\">Github</a></strong> or <strong><a href=\"https://www.npmjs.com/package/vue-stitches\">NPM</a> </strong>🤩.</p><p>If you have any ideas or suggestions, please let me know in the comments below or on Github.</p>","comment_id":"621660b9cb0223001ecb4b8b","feature_image":"https://ghost.dartiles.dev/content/images/2022/02/fec8ba80-ee9f-11ea-829e-ad4d9b6377c2-4.png","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2022-02-23T13:28:41.000-03:00","updated_at":"2022-02-23T20:24:06.000-03:00","published_at":"2022-02-23T13:59:21.000-03:00","custom_excerpt":"Discover a few ways to use stitches in your vue app ","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5f669a13e491f8001e550caa","name":"Javascript","slug":"javascript","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/javascript/"},{"id":"6216c24f98e273001e0bbed4","name":"Vue","slug":"vue","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/vue/"},{"id":"6216c24f98e273001e0bbed5","name":"Nuxt","slug":"nuxt","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/nuxt/"}],"authors":[{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"}],"primary_author":{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"},"primary_tag":{"id":"5f669a13e491f8001e550caa","name":"Javascript","slug":"javascript","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/javascript/"},"url":"https://ghost.dartiles.dev/how-to-use-stitches-in-vue-nuxt/","excerpt":"Discover a few ways to use stitches in your vue app ","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"How to use Stitches in Vue or Nuxt","meta_description":"Discover a few ways to use stitches in your vue or nuxt with @stitches/core","email_subject":null,"createdAt":"2022-02-23T13:28:41.000-03:00","desc":"Discover a few ways to use stitches in your vue app ","image":"media/blog/how-to-use-stitches-in-vue-nuxt/how-to-use-stitches-in-vue-nuxt.png"},{"id":"60eb0fac9b9799001eba3160","uuid":"50007fc0-ee97-4c23-8632-7c19ee1f0647","title":"Optional chaining without ES11? - Safely Access - Javascript Tips & Tricks","slug":"optional-chaining-without-es11-safely-access","html":"<p>As you know, <strong>every year EcmaScript releases a new version to improve JavaScript</strong>, these improvements have made our lives easier, and have allowed us to do things that we could not do with the language natively before, or that required many lines of code.<br><br>In this post we will talk a little bit about <strong>optional chaining</strong> <em>(implemented in ES11/ES2020 version)</em> instead of all the improvements introduced. For those who do not know, <strong>optional chaining is a functionality that allows us to safely access properties of objects in javascript, avoiding common errors such as <em>\"Can not read property foo of undefined\".</em></strong></p><p>Suppose we want to get the amount of apples from fruit objects has only bananas. Let's see what result we get with and without \"optional chaining\". I leave you an example</p><pre><code class=\"language-javascript\">const fruits =  {\n\tbananas: {\n        quantity: 12\n    }\n}\n\nfruits.apples.quantity // ERROR: Cannot read property 'quantity' of undefined\n\n// With optional chaining\nfruits.apples?.quantity // undefined</code></pre><p>As I mentioned earlier, this functionality was introduced in ES11, but what alternatives were there before for this?  Let's see some of them 🚀</p><h2 id=\"optional-chaining-with-or-operator\"><strong>\"Optional chaining\" with OR operator</strong></h2><p>As we know, javascript parentheses are used to evaluate an expression, so for the previous example we can check if \"apple\" exists in the fruits object before accessing the next property.</p><p>To do that we can use the OR operator like this.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">(fruits.apples || {}).quantity // undefined</code></pre><figcaption>Safely access with OR operator</figcaption></figure><!--kg-card-begin: markdown--><p>In this example, the operator will return the value of apples if it isn't falsy value, otherwise <code>{}</code></p>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>In other words, we have <code>(undefined || {}).quantity</code> literally, so it is safe to access &quot;quantity&quot; from an empty object and not from an <code>undefined</code> value.</p>\n<!--kg-card-end: markdown--><h2 id=\"optional-chaining-with-and-operator\"><strong>\"Optional chaining\" with AND operator</strong></h2><p>This is the most common option and perhaps the longest. Using the same example with the AND operator, it looks like this:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">fruits.apples &amp;&amp; fruites.apples.quantity // undefined</code></pre><figcaption>Safely access with AND operator</figcaption></figure><h2 id=\"safely-access-to-properties-with-default-parameters\"><strong>Safely access to properties with default parameters</strong></h2><p>If we want to safely access the property of an object through a function parameter, we can use the previous alternatives or use the default parameter (implemented in ES6).</p><p>I leave you an example:</p><pre><code class=\"language-javascript\">const fruits =  {\n\tbananas: {\n        quantity: 12\n    }\n}\n\nconst getFruitQuantity = (fruit = {}) =&gt; {\n    return fruit.quantity\n}\n\ngetFruitQuantity(fruits.apples) // undefined</code></pre><h2 id=\"useful-functions-for-more-complex-objects-\"><strong>Useful functions for more complex objects.</strong></h2><p>With some of these alternatives <strong>we can build a function that helps us access more complex object properties.</strong> <br><br>Using the fruits object:</p><pre><code class=\"language-javascript\">const fruits =  {\n\tbananas: {\n        quantity: 12\n    }\n}</code></pre><p><br>I leave you some examples found on the net:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">get = function(obj, key) {\n    return key.split(\".\").reduce(function(o, x) {\n        return (typeof o == \"undefined\" || o === null) ? o : o[x];\n    }, obj);\n}\n\n/* Usage */\nget(fruits, 'apples.quantity') // undefined</code></pre><figcaption><a href=\"https://newbedev.com/javascript-elegant-way-to-check-nested-object-properties-for-null-undefined\">Click here to go to the source</a></figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const getNestedObject = (nestedObj, pathArr) =&gt; {\n    return pathArr.reduce(\n      (obj, key) =&gt; (obj &amp;&amp; obj[key] !== 'undefined' ? obj[key] : null),\n      nestedObj\n    );\n};\n\n/* Usage */\ngetNestedObject(fruits, ['apples', 'quantity']) // null</code></pre><figcaption><a href=\"https://gist.github.com/marcandrewb/1d5b4deaac541fc9c61c3f06f9555353\">Click here to go to the source</a></figcaption></figure><h2 id=\"is-it-just-to-access-objects\"><strong>Is it just to access objects?</strong></h2><p>Throughout this post, I have only mentioned the properties of objects, so does it work for objects only? </p><p>The answer is NO. 🤓</p><p>We can use both the mentioned alternatives and the \"optional chaining\", to access elements of arrays or execute functions in a safe way. I leave you some examples:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const someObject = null\n\n// OR operator\n((someObject || {}).someFunction || function(){} )() // undefined\n\n// AND operator\ntypeof someObject === 'object' &amp;&amp; typeof someObject.someFunction === 'function' &amp;&amp; someObject.someFunction() // undefined\n\n// Optional Chaining\nsomeObject?.someFunction?.()</code></pre><figcaption>Function Invocation</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const someObject = null\nconst someArray = null\n\n// OR operator\n((someObject || {}).someArray || [])[0] // undefined\n\n// AND operator\ntypeof someObject === 'object' &amp;&amp; typeof someObject.someArray === 'object' &amp;&amp; someObject.someArray[0] // undefined\n\n// Optional Chaining\nsomeObject?.someArray?.[0]</code></pre><figcaption>Array index.</figcaption></figure><h2 id=\"conclusion\"><strong>Conclusion</strong></h2><p>As you can see of the three ways learned, the longest is with the AND operator, but none is as short as the \"optional chaining\".</p><p>These types of errors are common and frequent, so it is necessary to know how to handle and avoid them.</p><blockquote>If you find inconsistencies in the writing of this post or if on the contrary it is okay, please let me know in the comments section, English is not my native language but I try to express myself as best I can 🤗</blockquote><p>Do you like <strong>microfrontends</strong> or have you heard of them? Be aware that I will talk about them soon</p>","comment_id":"60eb0fac9b9799001eba3160","feature_image":"https://ghost.dartiles.dev/content/images/2021/07/Post-Covers.png","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2021-07-11T12:35:08.000-03:00","updated_at":"2021-07-11T21:09:06.000-03:00","published_at":"2021-07-11T20:02:01.000-03:00","custom_excerpt":"Learn a bit about safely access in Javascript and many ways to achieve it without optional chaining. Come, surely learn something new together. ","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5f669a13e491f8001e550caa","name":"Javascript","slug":"javascript","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/javascript/"}],"authors":[{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"}],"primary_author":{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"},"primary_tag":{"id":"5f669a13e491f8001e550caa","name":"Javascript","slug":"javascript","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/javascript/"},"url":"https://ghost.dartiles.dev/optional-chaining-without-es11-safely-access/","excerpt":"Learn a bit about safely access in Javascript and many ways to achieve it without optional chaining. Come, surely learn something new together. ","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"createdAt":"2021-07-11T12:35:08.000-03:00","desc":"Learn a bit about safely access in Javascript and many ways to achieve it without optional chaining. Come, surely learn something new together. ","image":"media/blog/optional-chaining-without-es11-safely-access/optional-chaining-without-es11-safely-access.png"},{"id":"5faf3f832e01b8001e3cbd76","uuid":"811ac63d-c41a-4816-a76f-3eba0786638e","title":"Cosas que quizás no sabías de React","slug":"cosas-que-quizas-no-sabias-de-react","html":"<p>Alguna vez te has preguntando <strong>¿Cómo funciona el método render de ReactDOM? ¿Por qué hay que importar React cada vez que creamos un componente? </strong> Esto y más te enseñare en este artículo. ❤</p><h2 id=\"-c-mo-funciona-el-m-todo-render-de-reactdom\">¿Cómo funciona el método render de ReactDOM?</h2><p>Este método es similar a <strong>document.appendChild() </strong>la diferencia consiste en que <strong>ReactDOM </strong>nos permite \"incrustar\" elementos de <strong>React </strong>en un contenedor y con <strong>appendChild </strong>solo podemos hacerlo con elementos HTML.</p><!--kg-card-begin: markdown--><p>Otra de las diferencias que existen entre estos dos métodos, es que <strong>appendChild()</strong> hace un push del elemento al contenedor (lo que quiere decir que los elementos existentes se mantienen y se agrega uno nuevo), en cambio <strong>el render de React DOM reemplaza totalmente el contenido del contenedor</strong>, basicamente sería un <code>container.innerHTML</code></p>\n<!--kg-card-end: markdown--><p>Mencionado esto, podemos agregar un spinner en el contenedor donde se renderizará nuestra aplicación y este desaparecerá automáticamente en el montaje de la app 🤔.</p><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n\n&lt;head&gt;\n\t&lt;meta charset=\"UTF-8\"&gt;\n\t&lt;meta name=\"viewport\" content=\"width=, initial-scale=\"&gt;\n\t&lt;title&gt;Dartiles Dev&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\t&lt;div id=\"root\"&gt;\n\t\t&lt;p&gt;Este contenido será reemplazado por el método render de React DOM o se mantendrá si usamos el appendChild&lt;/p&gt;\n\t&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre><p>Suponiendo que tenemos este <strong>HTML</strong> podemos agregar contenido con <strong>appendChild</strong> y <strong>render.</strong></p><p>Veamos un ejemplo: </p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const dartilesTitle = document.createElement(\"h1\");\n\ndartilesTitle.innerHTML = \"Estas en dartiles.dev\";\n\nconst container = document.getElementById(\"root\");\n\ncontainer.appendChild(dartilesTitle);\n</code></pre><figcaption>Añadiendo un h1 a nuestro contenedor con <strong>appendChild</strong></figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-jsx\">import React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst dartilesTitle = &lt;h1&gt;Estás en dartiles.dev&lt;/h1&gt;\n\nconst container = document.getElementById('root')\n\nReactDOM.render(dartilesTitle, container)</code></pre><figcaption>Añadiendo un h1 a nuestro contenedor con <strong>ReactDOM</strong></figcaption></figure><p>Una forma de aprender a identificar el método render de ReactDOM es recordar que <strong>el primer parámetro del método se refiere a que queremos renderizar,</strong> es decir, el elemento que queremos añadir, mientras que<strong> el segundo se refiere a donde añadirlo</strong>; en que contenedor.</p><!--kg-card-begin: html--><p>Te dejo un <a target=\"_blank\" href=\"https://stackblitz.com/edit/cosas-que-no-sabias-de-react?file=src/index.js\">link</a> en stackblitz con el <code>setTimeout</code> para que puedas observar lo que pasa con los dos métodos 😁 </p><!--kg-card-end: html--><h2 id=\"-por-qu-hay-que-importar-react-cada-vez-que-creamos-un-componente\">¿Por qué hay que importar React cada vez que creamos un componente?</h2><!--kg-card-begin: markdown--><p>Como te habrás fijado en el ejemplo de React, hacemos un <code>import React from 'react'</code> pero aparentemente en ningún lado lo usamos y si comentamos esta linea ocurre un error que nos dice que <code>React is not defined</code></p>\n<!--kg-card-end: markdown--><p>Entonces, <strong>¿Por qué nos aparece este error si no estamos usando explícitamente React?</strong> Bien para encontrar la respuesta a nuestra pregunta, primero debemos saber <strong>que pasa por detrás cuando escribimos código JSX.</strong></p><p>Cuando nosotros estamos escribiendo <strong>JSX </strong>(entiéndase jsx como el \"html\" dentro de javascript), al final babel está transformando ese código a <strong>React.createElement()</strong>, veámoslo mucho mejor con un ejemplo:</p><pre><code class=\"language-jsx\">/* ANTES DE LA COMPILACIÓN */\n\nimport React from 'react'\n\nconst dartilesContainer = &lt;div&gt;Estás en dartiles.dev&lt;/div&gt;\n\n/* DESPUÉS DE LA COMPILACIÓN */\n\nimport React from 'react';\n\nconst dartilesContainer = React.createElement(\"div\", null, \"Estás en dartiles.dev\"); \n// El código JSX desaparece y se convierte en React.createElement</code></pre><p>Es por eso que siempre necesitamos importar <strong>React </strong>al crear un componente o al utilizar código JSX, si bien es cierto hay frameworks como <strong>NextJS </strong>que hacen este trabajo por nosotros, en React no es así, al menos en las versiones anteriores a la 17.</p><p>Si nos vamos más a profundidad <strong>React.createElement </strong>crea un un objeto que contiene la información que React va a leer para crear elementos en el DOM. Partiendo del ejemplo anterior, algunas propiedades principales del objeto resultante es el siguiente:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const dartilesContainer = {\n    type: 'div',\n    props: {\n        children: 'Estás en dartiles.dev'\n    }\n}</code></pre><figcaption>Objeto resultante de <strong>React.createElement</strong></figcaption></figure><p>Como te podrás imaginar si tuviéramos que escribir nuestro componentes con <strong>React.createElement</strong> directamente nuestros archivos crecerían drásticamente, además de que se sería engorroso trabajar con ellos. Es por eso que JSX existe, para simplificar nuestro código y hacernos más fácil la vida a la hora de crear componentes con él.</p><h2 id=\"-cu-ndo-no-importar-react\">¿Cuándo NO importar React?</h2><p>Muy probablemente hayas importado <strong>React </strong>al crear <strong>custom hooks, </strong>porque te acostumbraste que cada vez que creamos un nuevo archivo había que hacer esto y lo cierto es que no, solamente tienes que importarlo cuando veas código <strong>JSX</strong>; de igual forma no podrás olvidarte de hacerlo porque tu aplicación dará error.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import { useState } from \"react\";\n\nexport const useHook = () =&gt; {\n  const [state, setState] = useState(\"Estás en dartiles.dev\");\n\n  return [state, setState];\n};\n</code></pre><figcaption>Para este ejemplo NO es necesario importar, basta solamente con <strong>useState</strong></figcaption></figure><h2 id=\"-qu-es-el-virtual-dom\">¿Qué es el Virtual DOM?</h2><p>Seguramente en tu proceso de aprendizaje de React habrás visto el término \"Virtual DOM\", si estás un poco más experimentado sabrás que DOM se refiere al <strong>Document Object Model,</strong> la API para representar documentos HTML/XML. </p><p>Ahora que sabemos que Virtual DOM y DOM son cosas distintas, llamémoslo <strong>VDOM</strong> y <strong>DOM</strong> respectivamente.</p><p>La palabra Virtual sirve más que nada para diferenciarlo del DOM, su función es crear un \"bridge\" o puente entre nuestra aplicación y el DOM, manteniendo el memoria el estado de la aplicación y una copia del DOM. </p><p>Gracias a que <strong>React mantiene en memoria el DOM</strong>, cada vez que se produzca un cambio en algún componente se actualiza el VDOM, luego de eso se compara el VDOM anterior con el nuevo y la diferencia entre estas versiones es finalmente reflejada en el DOM. </p><p>Esto hace que se manipule únicamente las secciones que cambiaron y no todo el árbol del DOM, obteniendo así mejor performance para nuestra aplicación.</p><!--kg-card-begin: markdown--><p><em><mark>Lo explicado anteriormente es similar a lo que hace <strong>git</strong>, detecta que partes cambiaron y los almacena, y al hacer el merge se unifican los cambios.</mark></em></p>\n<!--kg-card-end: markdown--><p>Te dejo a continuación una imagen que encontré por internet que te ayudará a entender mucho mejor este concepto:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"./media/blog/cosas-que-quizas-no-sabias-de-react/2020-11-image.png\" loading=\"lazy\" class=\"kg-image\" alt srcset=\"./media/blog/cosas-que-quizas-no-sabias-de-react/size-w600-2020-11-image.png 600w, ./media/blog/cosas-que-quizas-no-sabias-de-react/2020-11-image.png 900w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Representación gráfica del funcionamiento del VDOM. Fuente: https://www.cronj.com/</figcaption></figure><h2 id=\"conclusiones\">Conclusiones</h2><p>Este es un resumen de cositas que quizás no sabías, hay mucho más y más profundas 🤓, te invito a decirme en los <strong>comentarios</strong> que crees que falto añadir en este artículo y <strong>compartir este artículo</strong> para los que están inciando en el aprendizaje de React ❤</p>","comment_id":"5faf3f832e01b8001e3cbd76","feature_image":"https://ghost.dartiles.dev/content/images/2020/11/cosas-que-quizas-no-sabias-de-react.png","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2020-11-13T23:22:59.000-03:00","updated_at":"2020-11-23T18:56:11.000-03:00","published_at":"2020-11-22T10:48:19.000-03:00","custom_excerpt":"¿Por qué siempre hay que importar React al crear nuestros componentes? ¿Qué hace JSX por detrás? ¿Qué es el Virtual DOM? Descúbrelo en este artículo ❤","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5f8ced9d62d1f8001edf372d","name":"React","slug":"react","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/react/"}],"authors":[{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"}],"primary_author":{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"},"primary_tag":{"id":"5f8ced9d62d1f8001edf372d","name":"React","slug":"react","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/react/"},"url":"https://ghost.dartiles.dev/cosas-que-quizas-no-sabias-de-react/","excerpt":"¿Por qué siempre hay que importar React al crear nuestros componentes? ¿Qué hace JSX por detrás? ¿Qué es el Virtual DOM? Descúbrelo en este artículo ❤","reading_time":4,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"¿Por qué siempre hay que importar React al crear nuestros componentes? ¿Qué hace JSX por detrás? ¿Qué es el Virtual DOM? Descúbrelo en este artículo ❤","email_subject":null,"createdAt":"2020-11-13T23:22:59.000-03:00","desc":"¿Por qué siempre hay que importar React al crear nuestros componentes? ¿Qué hace JSX por detrás? ¿Qué es el Virtual DOM? Descúbrelo en este artículo ❤","image":"media/blog/cosas-que-quizas-no-sabias-de-react/cosas-que-quizas-no-sabias-de-react.png"},{"id":"5fa21994eadbac001ea7cacb","uuid":"6738ce95-d597-4101-b7b5-35e08ace98e8","title":"Escribe código JSX más rápido - Como activar Emmet en React","slug":"escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react","html":"<!--kg-card-begin: markdown--><p>Si alguna vez usaste <strong>Emmet</strong> sabrás de que estoy hablando, para los que no lo conozcan <strong>son un conjunto de snippets que nos permite escribir código mucho más rápido.</strong> Generalmente se suele usar en archivos <code>html</code> o <code>css</code> y sus preprocesadores.</p>\n<p>Sin embargo, soporta otros tipos de archivos o lenguajes que por defecto no están habilitados. En este articulo te enseñaré a <strong>como activar emmet en archivos js/jsx desde Visual Studio Code</strong>.</p>\n<!--kg-card-end: markdown--><h2 id=\"escribiendo-componentes-con-y-sin-emmet\"><strong>Escribiendo componentes con y sin Emmet</strong></h2><p>Para los que suelen ser más visuales (como yo) les voy a mostrar que vamos a lograr con esto a través de algunos gifs que hice para ustedes 😎</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-WithoutEmmet.gif\" loading=\"lazy\" class=\"kg-image\" alt><figcaption>Escribiendo código JSX sin Emmet</figcaption></figure><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-WithEmmet.gif\" loading=\"lazy\" class=\"kg-image\" alt><figcaption>Escribiendo código JSX con Emmet</figcaption></figure><h2 id=\"como-activar-emmet-para-nuestros-componentes-de-react\"><strong>Como activar Emmet para nuestros componentes de React</strong></h2><p>Para agregar al soporte de <strong>Emmet </strong>en <strong>Visual Studio Code </strong>debemos ir a las configuraciones del usuario para eso hay muchas formas de llegar ahí, la más conocida es ir al menú principal <strong>(File &gt; Preferences &gt; Settings)</strong></p><!--kg-card-begin: markdown--><p>Otra opción es acceder a las configuraciones del IDE con las combinaciones de teclas <code>ctrl</code> + <code>,</code> en Windows, desconozco el atajo para Mac pero tranquilo hay muchas formas de llegar hasta acá.</p>\n<p>Una vez ahí busquemos &quot;Emmet&quot; y luego vayamos a la sección donde dice <strong>Emmet: Include Languagues</strong> y damos clic en el botón <strong>Add Item</strong>, en la descripción de este apartado tenemos un par de ejemplos para habilitar el soporte en otros tipos de archivos o lenguajes.</p>\n<p>Para activar el soporte para javascript debemos agregar como <strong>item</strong> <code>javascript</code> y como <strong>value</strong> <code>javascriptreact</code></p>\n<!--kg-card-end: markdown--><blockquote>Esta funcionalidad sirve tanto para archivos <strong>.js</strong> como para archivos <strong>.jsx</strong></blockquote><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-ActivateEmmet.gif\" loading=\"lazy\" class=\"kg-image\" alt><figcaption>Activando el soporte de Emmet en los configuraciones del usuario</figcaption></figure><!--kg-card-begin: markdown--><p>Si preferimos editar las configuraciones desde el formato JSON, podemos presionar las teclas <code>ctrl</code> + <code>shift</code> + <code>p</code>, escribimos <strong>settings</strong> y seleccionamos la opción que trae entre paréntesis <strong>JSON</strong>, se nos abrirá un JSON en el cual debemos agregar un key más que se llame <strong>emmet.includeLanguages</strong>; éste será un objeto con una key llamada <code>javascript</code> cuyo value debe ser <code>javascriptreact</code></p>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-ActivateEmmet2.gif\" loading=\"lazy\" class=\"kg-image\" alt><figcaption>Activando el soporte de Emmet en los configuraciones del usuario (JSON)</figcaption></figure><p>Una vez hecho cualquiera de estas opciones, no hace falta reiniciar nuestro editor podemos ir a nuestro archivo de javascript y podemos escribir JSX más rápido.</p><p>Además de escribir elementos de html comunes y corrientes, también podemos <strong>escribir componentes de React</strong>. Te dejo un pequeño ejemplo: </p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-Emmet-Components.gif\" loading=\"lazy\" class=\"kg-image\" alt><figcaption>Escribiendo componentes de React con Emmet</figcaption></figure><h2 id=\"conclusiones\"><strong>Conclusiones</strong></h2><!--kg-card-begin: html--><p>Emmet tiene un montón de configuraciones y opciones que en este artículo no explicaré, pero si quería dejarles saber que pueden explorarlas una a una a través de este <a href=\"https://code.visualstudio.com/docs/editor/emmet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a>.<p><!--kg-card-end: html--><p>Muchísimas gracias por llegar hasta acá, espero que hayas aprendido algo nuevo y si te gustan este tipo de material déjamelo saber en los <strong>comentarios </strong>❤❤</p>","comment_id":"5fa21994eadbac001ea7cacb","feature_image":"https://ghost.dartiles.dev/content/images/2020/11/carbon.png","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2020-11-04T00:01:40.000-03:00","updated_at":"2020-11-05T22:07:06.000-03:00","published_at":"2020-11-04T00:03:59.000-03:00","custom_excerpt":"Descubre como escribir tus componentes en React mucho más rápido con Emmet 🤯","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5f8ced9d62d1f8001edf372d","name":"React","slug":"react","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/react/"}],"authors":[{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"}],"primary_author":{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"},"primary_tag":{"id":"5f8ced9d62d1f8001edf372d","name":"React","slug":"react","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/react/"},"url":"https://ghost.dartiles.dev/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/","excerpt":"Descubre como escribir tus componentes en React mucho más rápido con Emmet 🤯","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"Descubre como escribir tus componentes en React mucho más rápido con Emmet 🤯","email_subject":null,"createdAt":"2020-11-04T00:01:40.000-03:00","desc":"Descubre como escribir tus componentes en React mucho más rápido con Emmet 🤯","image":"media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react.png"},{"id":"5f98b578e67152001e735162","uuid":"1572f496-62b4-4194-8419-3a8c5b7b164d","title":"useEffect, el hook de efecto de React - Ciclos de vidas en componentes funcionales","slug":"useeffect-react-hooks-ciclos-de-vida","html":"<!--kg-card-begin: html--><p>Además del useState, el hook useEffect es uno de los más usados en React. Anteriormente ya explicamos <a href=\"https://dartiles.dev/blog/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos\" target=\"_blank\">como funciona el useState y como usarlo con arrays y objetos</a>, y ahora es el momento de este hook 🤗</p><!--kg-card-end: html--><h2 id=\"ciclos-de-vidas-en-componentes-funcionales\"><strong>Ciclos de vidas en componentes funcionales</strong></h2><p>Antes en React (versiones inferiores a la 16.8) disponíamos de varias funciones heredadas de la clase Component, que nos permitían acceder a diferentes momentos del ciclo de vida de nuestro componente (montaje, actualización y desmontaje) .</p><p>Ahora con la llegada de este hook, se pueden acceder a los eventos más usados desde una única función, tales son <code>componentDidMount</code>, <code>componentDidUpdate</code> y <code>componentWillUnmount</code></p><h2 id=\"-c-mo-se-usa-el-useeffect\"><strong>¿Cómo se usa el useEffect?</strong></h2><p>Como bien les conté, el useEffect unifica 3 métodos asociados al ciclo de vida de nuestro componente, así que ¿Cómo diferenciamos cada uno de estos métodos?</p><p>Este hook al igual que todos son funciones, y en este caso recibe dos parámetros, el primero corresponde a un callback o función y el segundo un arreglo de dependencias.</p><p>El callback no recibe ningún parámetro solamente nos sirve para ejecutar código en el momento de que se produzca el efecto deseado.</p><p>Por otro lado, el segundo parámetro es opcional y dependiendo de su valor el efecto se ejecutará.</p><pre><code class=\"language-javascript\">import React, { useEffect } from 'react'\n\nuseEffect(() =&gt; { /* Your code here... */ });</code></pre><h2 id=\"momentos-de-ejecuci-n-seg-n-el-valor-del-segundo-par-metro-del-useeffect\"><strong>Momentos de ejecución según el valor del segundo parámetro del useEffect</strong></h2><p>Pasemos a descubrir los 3 posibles casos en los que se puede ejecutar este hook según el valor del segundo parámetro. 🤓</p><!--kg-card-begin: markdown--><ul>\n<li>\n<p><strong>Sin valor</strong>: cuando omitimos este parámetro, el efecto se producirá en el primer renderizado y en cada uno de los subsecuentes (cuando se produce un cambio de estado o las props cambian). Podemos decir que en este caso están combinados los métodos <code>componentDidMount</code> y <code>componentDidUpdate</code></p>\n</li>\n<li>\n<p><strong>Arreglo vacío [ ]</strong>: cuando le pasamos este valor, el efecto se producirá <strong>únicamente</strong> en el primer renderizado y es equivalente al método <code>componentDidMount</code>. Y esto es debido a que el efecto se produce siempre y cuando el valor dentro del arreglo [ ] cambie, y como en este caso al no recibir nada, React ejecuta el efecto una única vez.</p>\n</li>\n<li>\n<p><strong>Arreglo con dependencias</strong>: los posibles valores de este arreglo pueden ser variables asociadas a un <strong>estado</strong> o <strong>props</strong> del componente, según sea el caso el hook se ejecutará cada vez que su(s) dependencia(s) cambie(n).</p>\n<p>Podemos pasar la cantidad de dependencias que queramos, pero realmente no es muy recomendado (más que nada por razones de performance) y se opta por usar varios <code>useEffect</code> con diferentes dependencias.</p>\n<p>Este caso es similar al método <code>componentDidUpdate</code>, a excepción de que sólo se ejecutará cuando las dependendencias cambien y no ante cada cambio o reenderizado como si ocurre con este método de las componentes de clases.</p>\n</li>\n</ul>\n<!--kg-card-end: markdown--><p>Como te habrás dado cuenta no mencioné el método <code>componentWillUnmount</code>, y es porque no solamente tiene que ver con el valor del segundo parámetro del <code>useEffect</code>, si no que hace falta unos pequeños detalles que ya te contaré 😈</p><!--kg-card-begin: markdown--><p>A continuación te dejo las comparaciones de <code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code> con el <code>useEffect</code></p>\n<!--kg-card-end: markdown--><h2 id=\"ciclos-de-vida-en-componentes-de-tipo-clase-vs-componentes-de-tipo-funci-n\"><strong>Ciclos de vida en componentes de tipo clase vs componentes de tipo función</strong></h2><p>Si llevas mucho tiempo trabajando con los componentes de clases, te servirá mucho esta información para saber las equivalencias de los métodos antes mencionados y su uso a través del useEffect.</p><h3 id=\"componentdidmount\">componentDidMount</h3><p>Si nos vamos a la traducción literal del nombre de este método al español es \"El componente se montó\", y sí, este es el preciso momento en el que se ejecuta este método, justo y únicamente luego de hacer el <strong>primer renderizado </strong>del componente.</p><p>Podemos decir que hace la misma función que el método <code>OnInit</code> de Angular 😎</p><p>Bien, pasemos a como se accede a este momento del ciclo de vida con componentes de clases y como lo haríamos con los componentes funcionales</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-jsx\">import React from \"react\";\nclass App extends React.Component {\n  state = { name: \"Diego\" };\n\n  componentDidMount() { // Método ejecutado en el primer renderizado\n    console.log(\"Se inicializó el componente por primera vez\");\n  }\n\n  render() {\n    return &lt;h1&gt;Mi nombre es {this.state.name}&lt;/h1&gt;;\n  }\n}\nexport default App;\n</code></pre><figcaption>Accediendo al momento del primer renderizado con componentes de clase</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-jsx\">import React, { useEffect, useState } from \"react\";\n\nconst App = () =&gt; {\n  const [state] = useState({ name: \"Diego\" });\n    \n  useEffect(() =&gt; {\n    console.log(\"Se inicializó el componente por primera vez\");\n  }, []); // Método ejecutado en el primer renderizado\n    \n  return &lt;h1&gt; Hello {state.mensaje}&lt;/h1&gt;;\n};\n\nexport default App;\n</code></pre><figcaption>Accediendo al momento del primer renderizado con componentes funcionales</figcaption></figure><p>Como verán el segundo parámetro de este hook juega un papel muy importante para decidir cuando se ejecutará el efecto, tal cual como mencioné anteriormente en el caso de querer ejecutar código al momento del primer renderizado, basta con pasarle un array vacío al segundo parámetro 😁</p><blockquote>Entiéndase <strong>primer renderizado </strong>como el momento justo cuando React monta un componente en el DOM, es decir, cuando nosotros veamos nuestro componente en el DOM, posteriormente se ejecutará por <strong>única vez</strong> el efecto.</blockquote><h3 id=\"componentdidupdate\">componentDidUpdate</h3><p>Su traducción literal al español es \"el componente se actualizó\", creo que el nombre se explica por si solo.</p><!--kg-card-begin: markdown--><p>Este método se ejecutará cada vez que se produzca un cambio de estado o de props e independientemente de a quien pertenezca el cambio, es decir, no importa si cambio una <code>prop</code> o un <code>state</code> sea cual sea el caso se ejecutará este método.</p>\n<p>Si nos vamos a Angular este método es similar a <code>OnChanges</code> 😎</p>\n<p>Comparémoslo con el <code>useEffect</code></p>\n<!--kg-card-end: markdown--><p>Supongamos que queremos registrar la cantidad de veces que ha sido presionado un botón ante cada cambio:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-jsx\">import React from \"react\";\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicks: 0\n    };\n  }\n\n  componentDidUpdate() {\n    // Ante cada cambio mostramos por consola la cantidad de veces que ha sido presionado el boton\n    console.log(\n      \"Cantidad de veces que ha sido presionado el botón:\",\n      this.state.clicks\n    );\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;Este botón ha sido presionado {this.state.clicks} vece(s)&lt;/p&gt;\n        &lt;button\n          onClick={() =&gt; this.setState({ clicks: this.state.clicks + 1 })}\n        &gt;\n          Presioname\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default Counter;</code></pre><figcaption>Usando los eventos de las clases en React</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-jsx\">import React, { useState, useEffect } from \"react\";\n\nconst Counter = () =&gt; {\n  const [state, setState] = useState({ clicks: 0 });\n\n  useEffect(() =&gt; {\n    console.log(\n      \"Cantidad de veces que ha sido presionado el botón:\",\n      state.clicks\n    );\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Este botón ha sido presionado {state.clicks} vece(s)&lt;/p&gt;\n      &lt;button onClick={() =&gt; setState({ clicks: state.clicks + 1 })}&gt;\n        Presioname\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;</code></pre><figcaption>Usando los hooks useState y useEffect</figcaption></figure><p>A nivel funcional encontramos una pequeña diferencia, como les comenté anteriormente cuando el useEffect no tiene dependencia se están ejecutando los métodos <code>componentDidMount</code> y <code>componentDidUpdate</code>, por lo cual, en el ejemplo del useEffect tendremos que en el primer renderizado veremos el log en la consola.</p><p>Pero este es un detalle menor, lo realmente interesante es cuando queramos registrar por consola solamente cuando cambie la cantidad de clicks, ya que el código que tenemos ahora provocará que se registre ese evento sin importar en donde se produjo el cambio, sean props o estados.</p><p>Veamos un ejemplo de como solucionar esto, agregando un botón \"B\" y registrando únicamente en consola cuando el botón \"A\" sea presionado. 🙊</p><pre><code class=\"language-jsx\">class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { clicksA: 0, clicksB: 0 };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.clicksA !== this.state.clicksA) {\n    console.log(\n      \"Cantidad de veces que ha sido presionado el botón A:\",\n      this.state.clicksA\n    );\n    }\n  }\n\n  render() {\n    return (\n    &lt;div&gt;\n      &lt;button\n        onClick={() =&gt; this.setState({ ...this.state, clicksA: this.state.clicksA + 1 })}\n      &gt;\n        Boton A\n      &lt;/button&gt;\n      &lt;button\n        onClick={() =&gt; this.setState({ ...this.state, clicksB: this.state.clicksB + 1 })}\n      &gt;\n        Boton B\n      &lt;/button&gt;\n    &lt;/div&gt;\n    );\n  }\n}\n\nexport default Counter;</code></pre><pre><code class=\"language-jsx\">const Counter = () =&gt; {\n  const [state, setState] = useState({ clicksA: 0, clicksB: 0 });\n\n  useEffect(() =&gt; {\n    console.log(\n      \"Cantidad de veces que ha sido presionado el botón A:\",\n      state.clicksA\n    );\n  }, [state.clicksA]);\n\n  return (\n    &lt;div&gt;\n      &lt;button\n        onClick={() =&gt; setState({ ...state, clicksA: state.clicksA + 1 })}\n      &gt;\n        Boton A\n      &lt;/button&gt;\n      &lt;button\n        onClick={() =&gt; setState({ ...state, clicksB: state.clicksB + 1 })}\n      &gt;\n        Boton B\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;</code></pre><!--kg-card-begin: markdown--><p>Como podrán observar en las componentes de clases tenemos que hacer una diferenciación explicita para decidir cuando registrar en consola las veces que el botón A ha sido presionado a diferencia del useEffect que solo basta con pasarle como dependencia el <code>state.clicksA</code>.</p>\n<p>Otra diferencia que existe, es que el <code>useEffect</code> lo podemos usar cuantas veces querramos y el <code>componentDidUpdate</code> solo una vez y todos los cambios pasaran por ese método.</p>\n<!--kg-card-end: markdown--><p>Si aún llegando hasta acá te quedan dudas sobre el funcionamiento y las diferencias de este evento, puedes hacérmelo saber en los comentarios 😊</p><h3 id=\"componentwillunmount\">componentWillUnmount</h3><p>Bien hasta ahora no hemos explicado la equivalencia de este método con este hook, antes de explicarlo vayamos a la traducción literal al español para saber cuando se ejecuta este evento 😁, tenemos entonces \"El componente se desmontará\", esto quiere decir que el método se ejecutará justo antes de desmontarse del DOM.</p><p>La equivalencia en Angular sería <code>OnDestroy</code> 😎</p><!--kg-card-begin: markdown--><p>Uno de los casos más útiles por la que solemos usar este evento, es para cancelar alguna suscripción, para ello supongamos que tenemos en nuestro componente un <code>setInterval</code> que hace &quot;algo&quot; y queremos limpiarlo antes de que nuestro componente se desmonte.</p>\n<!--kg-card-end: markdown--><pre><code class=\"language-jsx\">import React from \"react\";\n\nclass Interval extends React.Component {\n  constructor(props) {\n    super(props);\n    this.interval;\n  }\n\n  componentDidMount() { // Inicializamos el interval al montarse el componente\n    this.interval = setInterval(() =&gt; console.log(\"Algo estoy haciendo\"), 1000);\n  }\n\n  componentWillUnmount() { //Eliminamos el interval justo antes de desmontarse el componente\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return &lt;p&gt;Componente Interval&lt;/p&gt;;\n  }\n}\n\nexport default Interval;\n</code></pre><pre><code class=\"language-jsx\">import React, { useEffect } from \"react\";\n\nconst Interval = () =&gt; {\n  useEffect(() =&gt; {\n    const interval = setInterval( () =&gt; console.log(\"Algo estoy haciendo\"), 1000); // Inicializamos el interval al montarse el componente\n    return () =&gt; clearInterval(interval); //Eliminamos el interval justo antes de desmontarse el componente\n  }, []);\n\n  return &lt;p&gt;Componente Interval&lt;/p&gt;;\n};\n\nexport default Interval;</code></pre><!--kg-card-begin: markdown--><p>Como podrán observar dentro del callback del <code>useEffect</code>, estamos retornando además otra función, esta función nos permite ejecutar código justo antes de que el componente se desmonte.</p>\n<!--kg-card-end: markdown--><blockquote>Para acceder al método <strong>componentWillUnmount </strong>desde el <strong>useEffect, </strong>además de retornar una función, la dependencia debe ser un arreglo vacío [ ].</blockquote><p>Es de buena práctica, eliminar cualquier tipo de evento asincrónico antes de desmontar el componente a fin de mejorar el performance y evitar cualquier problema de volcado de memoria y bugs.</p><h2 id=\"conclusiones\"><strong>Conclusiones</strong></h2><p>Bien en resumen, el useEffect es una nueva manera de acceder a los ciclos de vidas de nuestros componentes funcionales e incluso nos permite usar menos líneas de código 🤓. ¿Te gustó este post? ¿Aprendiste algo nuevo? ¿Tienes alguna duda? ¿Quieres que explique algo en particular? Házmelo saber en la sección de comentarios y recuerda seguirme en mis redes sociales 😢 </p><p>Gracias por leer 😚</p>","comment_id":"5f98b578e67152001e735162","feature_image":"https://ghost.dartiles.dev/content/images/2020/10/useEffect.jpg","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2020-10-27T21:04:08.000-03:00","updated_at":"2020-10-31T14:08:49.000-03:00","published_at":"2020-10-31T13:00:00.000-03:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5f8ced9d62d1f8001edf372d","name":"React","slug":"react","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/react/"}],"authors":[{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"}],"primary_author":{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"},"primary_tag":{"id":"5f8ced9d62d1f8001edf372d","name":"React","slug":"react","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/react/"},"url":"https://ghost.dartiles.dev/useeffect-react-hooks-ciclos-de-vida/","excerpt":"Además del useState, el hook useEffect es uno de los más usados en React.\nAnteriormente ya explicamos como funciona el useState y como usarlo con arrays\ny\nobjetos\n[https://dartiles.dev/blog/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos]\n, y ahora es el momento de este hook 🤗\n\nCiclos de vidas en componentes funcionales\nAntes en React (versiones inferiores a la 16.8) disponíamos de varias funciones\nheredadas de la clase Component, que nos permitían acceder a diferentes moment","reading_time":7,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"Descubre como acceder a los ciclos de vida de los componentes funcionales, como usar el hook useEffect de React y su equivalencia a los componentes de clases 💖","email_subject":null,"createdAt":"2020-10-27T21:04:08.000-03:00","desc":"Además del useState, el hook useEffect es uno de los más usados en React.\nAnteriormente ya explicamos como funciona el useState y como usarlo con arrays\ny\nobjetos\n[https://dartiles.dev/blog/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos]\n, y ahora es el momento de este hook 🤗\n\nCiclos de vidas en componentes funcionales\nAntes en React (versiones inferiores a la 16.8) disponíamos de varias funciones\nheredadas de la clase Component, que nos permitían acceder a diferentes moment","image":"media/blog/useeffect-react-hooks-ciclos-de-vida/useeffect-react-hooks-ciclos-de-vida.png"},{"id":"5f8cc893966885001e79d750","uuid":"ed8284a3-8b5e-4a44-aa16-cfff0adba9b8","title":"Como funciona el hook useState y como usarlos con Arrays y Objetos","slug":"como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos","html":"<p>En este artículo te voy a explicar que es y para que sirve el hook <strong>useState </strong>de React, además de los distintos usos que le podemos dar.</p><h2 id=\"-qu-son-los-hooks-de-react\"><strong>¿Qué son los hooks de React?</strong></h2><p>Los hooks son funciones que se \"atan\" o \"enganchan\" a los componente de tipo función (componentes funcionales) y nos aportan muchas de las características que teníamos en las componentes de tipo clase. </p><p>Estas funciones se introdujeron en la versión <strong>16.8</strong> de React, por ende, antes de utilizarlos asegúrate de tener esta versión o posterior.</p><h2 id=\"para-que-sirve-el-hook-usestate\"><strong>Para que sirve el hook useState</strong></h2><p>El hook useState sirve para almacenar un estado a través de una variable en nuestro componente. </p><h2 id=\"-c-mo-se-usa-el-usestate\"><strong>¿Cómo se usa el useState?</strong></h2><p>Como les había comentado, los hooks son funciones los cuales reciben un parámetro que representa el valor por defecto que tendrá nuestro estado y retorna un arreglo de dos elementos, el primer elemento contiene el estado actual y el segundo una función para modificar dicho estado.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import React, { useState } from \"react\"; // Importamos useState desde 'react'\n\nconst App = () =&gt; {\n  const state = useState(\"default value\"); // Valor inicial del estado\n  const stateValue = state[0]; // El primer elemento es el valor del estado\n  const setStateValue = state[1]; // El segundo elemento es la función que utilizaremos para actualizar el estado\n\n  // A continuación mostramos el valor del estado y lo cambiamos a 'Another value' al hacer clic en el elemento div\n  return &lt;div onClick={() =&gt; setStateValue('Another value')}&gt;{stateValue}&lt;/div&gt;;\n};\n\nexport default App;\n</code></pre><figcaption>Manera larga de declarar estos estados</figcaption></figure><p>Si bien es cierto, no es la mejor forma de declarar el estado y su actualizador en variables separadas, si que es más fácil de entender 👨‍💻</p><p>Pero la forma que se suele utilizar y la más corta para declararlas, es la siguiente:</p><pre><code class=\"language-javascript\">const [stateValue, setStateValue] = useState(\"default value\");</code></pre><p>Con la línea anterior obtenemos el mismo resultado, pero utilizando menos líneas de código. Si acostumbras a trabajar con el menor código posible esta forma te gustará 😁</p><p>En este caso yo inicialice el estado con un <em>string </em>pero podemos usar cualquier tipo de valor como por ejemplo:</p><ul><li>Arreglos</li><li>Objetos</li><li>Booleanos</li><li>Strings</li></ul><p>Y en este artículo te mostraré ejemplos con Arreglos y Objetos 😜</p><h2 id=\"usar-arreglos-o-arrays-en-usestate\"><strong>Usar Arreglos o Arrays en useState</strong></h2><p>Aquí hay una particularidad con este tipo de datos y el hook useState que ya les iré contando.</p><p>Primero declaramos nuestros useState con Arreglos, en este caso yo usaré el ejemplo de un array que contenga nombre de frutas:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const [fruits, setFruits] = useState(['Banana', 'Fresa', 'Durazno']);</code></pre><figcaption>Declarando el estado</figcaption></figure><p>Si quisiéramos agregar el nombre de otra fruta a esta lista, seguramente estés pensando en usar el método <strong>push(), </strong>pero lamentablemente no nos servirá y antes de explicarte porque, te muestro como haríamos ese cambio de estado:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">  fruits.push('Manzana') // Opción 1\n  setFruits(fruits.push('Manzana')) // Opción 2</code></pre><figcaption>Intentando agregar una fruta a nuestra lista usando el método push del array</figcaption></figure><p>Si intentaste esto alguna vez seguramente te diste cuenta que no funcionó del todo bien, y esto es debido a las siguientes razones: </p><ul><li>La variable <strong>fruits</strong> es inmutable (no se puede modificar), por eso tiene su función \"actualizadora\" (Opción 1)</li><li>Utilizar el método <strong>push </strong>dentro de la función <strong>setFruits </strong>tampoco funciona, porque si repasamos la teoría nos daremos cuenta que este método a pesar de agregar un nuevo elemento a un array lo que retorna es el <strong>length </strong>del array resultante y esto es lo que estaría recibiendo <strong>setFruits, </strong>que en nuestro caso es 4, es por eso que el nuevo valor de nuestro estado es 4 (Opción 2).</li></ul><h3 id=\"formas-de-actualizar-un-array-en-usestate\">Formas de actualizar un array en useState</h3><p>Antes de explicar cual es la manera correcta de modificar el valor de este elemento, tenemos que saber que la función actualizadora (setFruits en nuestro caso) puede recibir una función que tiene como único parámetro el valor actual del estado y retornar el nuevo valor del mismo. Seguramente al momento de leer esto se te venga a la cabeza como actualizar nuestro estado 😀, veamos si coincidimos:</p><p>Usando el método <strong>concat(), </strong>podemos actualizar nuestro estado según las dos formas aprendidas: usando la función interna de la función actualizadora o pasando directamente el valor nuevo a la función actualizadora.<br><br>Dejo a continuación un ejemplo con ambas opciones:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">setFruits(currentFruits =&gt; currentFruits.concat('Manzana')) // Opción 1\nsetFruits(fruits.concat('Manzana')) // Opción 2\n\n// Ambas opciones son validas</code></pre><figcaption>Actualizando nuestra lista de fruta con el método concat()</figcaption></figure><p>La función interna de <strong>setFruits </strong>puede ser útil cuando queramos desarrollar cierta lógica antes de definir el nuevo valor, pero particularmente no lo suelo hacer, primero preparo el valor nuevo en una variable y se lo paso a <strong>setFruits </strong>para actualizar el estado.</p><blockquote>React no actualiza el estado de manera instantánea, sino que agrega el pedido de actualización a la cola para el próximo renderizado del componente, y la siguiente que vez que pase por nuestro <strong>useState </strong>omitirá el valor por defecto que le asignamos y en su lugar usará el valor que estaba en la cola.</blockquote><p>Ya que sabemos la manera correcta de actualizar el estado, hay otra forma de hacerlo mucho más amigable y corta, usando <strong>spread operator</strong></p><pre><code class=\"language-javascript\">setFruits([...fruits, 'Manzana'])</code></pre><h2 id=\"usar-objetos-en-usestate\"><strong>Usar objetos en useState</strong></h2><p>Con lo aprendido anteriormente, usemos estos mismos conocimiento con este tipo de dato, primero veamos cual es nuestro candidato para esta prueba 😄</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">  const [person, setPerson] = useState(\n    {\n      name: 'Diego',\n      age: 22,\n    }\n  );</code></pre><figcaption>Definiendo el estado</figcaption></figure><p>Como bien lo dice el título ahora probaremos con objetos, en este caso son los datos de una persona que se llama \"Diego\" como yo y casualmente tiene mi misma edad 🤔 jaja. </p><p>¡Concentrémonos! Supongamos que me quiero aumentar la edad a 30, ya sabemos que para editar la propiedad de un objeto hacemos lo siguiente:</p><pre><code class=\"language-javascript\">person.age = 30</code></pre><p>Por ende podemos pensar que para actualizar el valor de nuestro estado haríamos esto</p><pre><code class=\"language-javascript\">person.age = 30\nsetPerson(person)</code></pre><p>pero no nos funciona porque para React el estado nunca cambió por ende no vio la necesidad de renderizar el componente nuevamente para reflejar este \"cambio\".</p><blockquote>Uno de los requisitos para que <strong>React </strong>refleje un nuevo estado, es que el mismo cambie y en el caso de los objetos utiliza <strong>Object.is </strong>para hacer esta comprobación</blockquote><p>Cuando tengamos que actualizar una propiedad de un objeto debemos pasarle uno nuevo junto a la propiedad modificada, para esto podemos usar el <strong>spread operator, </strong>te dejo un ejemplo 😆</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import React, { useState } from \"react\";\n\nconst Person = () =&gt; {\n  const [person, setPerson] = useState(\n    {\n      name: 'Diego',\n      age: 22,\n    }\n  );\n  const changeAge = () =&gt; {\n    setPerson({...person, age: 30})\n  }\n\n\n  return &lt;div onClick={() =&gt; changeAge()}&gt;Edad de la persona {person.age}&lt;/div&gt;;\n};\n\nexport default Person;\n</code></pre><figcaption>Actualizamos mi edad cuando demos clic a el elemento div</figcaption></figure><h2 id=\"agradecimientos\"><strong>Agradecimientos</strong></h2><p>Mil gracias si llegaste hasta aquí, si te sirvió de algo este artículo déjamelo saber en los comentarios y compártelo con tus amigos 🥰</p><p>Si te quedaron dudas o deseas que explique algún otro hook o cosa del mundo del frontend, avísame desde los comentarios 🤩</p>","comment_id":"5f8cc893966885001e79d750","feature_image":"https://ghost.dartiles.dev/content/images/2020/10/react-logo-2.png","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2020-10-18T19:58:27.000-03:00","updated_at":"2020-10-24T14:24:25.000-03:00","published_at":"2020-10-18T21:43:25.000-03:00","custom_excerpt":"Descubre a pronfudidad como se usa el hook useState, además te muestro casos particulares que posiblemente te hayan explotado la cabeza 🤯","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5f8ced9d62d1f8001edf372d","name":"React","slug":"react","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/react/"},{"id":"5f669a13e491f8001e550caa","name":"Javascript","slug":"javascript","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/javascript/"}],"authors":[{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"}],"primary_author":{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"},"primary_tag":{"id":"5f8ced9d62d1f8001edf372d","name":"React","slug":"react","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/react/"},"url":"https://ghost.dartiles.dev/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos/","excerpt":"Descubre a pronfudidad como se usa el hook useState, además te muestro casos particulares que posiblemente te hayan explotado la cabeza 🤯","reading_time":4,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"createdAt":"2020-10-18T19:58:27.000-03:00","desc":"Descubre a pronfudidad como se usa el hook useState, además te muestro casos particulares que posiblemente te hayan explotado la cabeza 🤯","image":"media/blog/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos.png"},{"id":"5f669903e491f8001e550c82","uuid":"fd13b219-2a92-43d8-ae74-d0941a35121a","title":"Novedades de EcmaScript 2020 o ES11","slug":"novedades-de-ecmascript-2020-o-es11","html":"<p>En este artículo me gustaría explicar un poco, todas las novedades ya disponibles en JavaScript.</p><p>Pero antes de empezar quisiera explicar algunas cosas:</p><h2 id=\"-qu-es-ecmascript\"><strong>¿Qué es Ecmascript?</strong></h2><p>Ecmascript es el estándar definido en ECMA-262 para los lenguajes de <em>scripting de propósito general,</em> entre ellos se encuentra nuestro lenguaje favorito <em>JavaScript.</em></p><p>Esto es bastante confuso incluso hasta para mi, la forma más fácil que se me hace de entender esto, es ver a EcmaScript como si fuese la RAE (quien es la que establece las normativas para el idioma Español) de JavaScript.</p><p>Bueno, a continuación en este artículo quisiera compartir, las nuevas características presentadas en este estándar.</p><p>Ahora si, ¿Qué hay de nuevo en esta versión?</p><h2 id=\"importaciones-din-micas-dynamic-imports-\"><strong>Importaciones Dinámicas (Dynamic Imports)</strong></h2><p>Algo que pasaba mucho en JavaScript, es que no podíamos importar módulos según sean necesarios.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">import * as myModule from './someModule.js/'\n// o \nimport { myModule } from './someModule.js/'\n\nconst button = document.getElementById('button')\n\nbutton.addEventListener('click', () =&gt; myModule.doSomething())</code></pre><figcaption>Importación de Módulos antes de ES11</figcaption></figure><p>En este ejemplo estaríamos utilizando el método <em>doSomething() </em>de <em>myModule, </em>en el evento click de algún botón. Independientemente de cuando ocurra el evento click, aquí hay varios temas que debemos tener en cuenta:</p><ul><li>La importación de nuestro modulo se produce durante el tiempo de carga del módulo actual.</li><li>No hay forma de cambiar la “dirección” u “origen” de nuestro modulo, dinámicamente.</li><li>Muy probablemente nuestro módulo quede sin usarse (aunque este ya haya sido cargado), si no se produce el click tan esperado.</li></ul><p>Todo esto afecta el rendimiento de la aplicación que estemos desarrollando.</p><p>Con los <em>imports dinámicos, </em>nos despedimos de estos problemas:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const customPath = someExpression ? './somePath' : './anotherPath'\n\nconst button = document.getElementById('button')\n\nbutton.addEventListener('click', async () =&gt; {\n    const myModule = await import(`${customPath}/myModule.js`)\n    myModule.doSomething()\n})</code></pre><figcaption>Importación dinámica de módulos implementada en ES11</figcaption></figure><p><strong>Import</strong> recibe el path donde se encuentra nuestro módulo y devuelve una promesa al terminar.</p><h2 id=\"n-meros-enteros-m-s-grandes-bigint-\"><strong>Números Enteros más “grandes” (BigInt)</strong></h2><p>Hasta ahora en JavaScript podíamos hacer cálculos matemáticos cuyos resultados no sean mayores a 2⁵³ — 1, es decir, hasta <strong>Number.MAX_SAFE_INTEGER.</strong></p><p>Les muestro un ejemplo sencillo de que pasa cuando nos sobrepasamos de este valor.</p><pre><code class=\"language-javascript\">Number.MAX_SAFE_INTEGER\n// 9007199254740991\nNumber.MAX_SAFE_INTEGER + 1\n// 9007199254740992\nNumber.MAX_SAFE_INTEGER + 2\n// 9007199254740992\nNumber.MAX_SAFE_INTEGER + 3\n// 9007199254740994</code></pre><p>Con este ejemplo sabemos que JavaScript, no es capaz de representar cálculos matemáticos que superen el valor de <strong>Number.MAX_SAFE_INTEGER.</strong></p><p>Para solventar este problema se ha añadido un nuevo tipo de dato numérico, llamado BigInt que como su nombre indica solo soporta números enteros.</p><p>La forma de utilizar este tipo de dato, es igual que <strong>Number </strong>o con la terminación “n” precedido del número.</p><pre><code class=\"language-javascript\">BigInt(Number.MAX_SAFE_INTEGER)\n// 9007199254740991n\nBigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)\n// 9007199254740992n\nBigInt(Number.MAX_SAFE_INTEGER) + BigInt(2)\n// 9007199254740993n\nBigInt(Number.MAX_SAFE_INTEGER) + BigInt(3)\n// 9007199254740994n\n\nBigInt(Number.MAX_SAFE_INTEGER) + 3n\n// 9007199254740994n\n9007199254740991n + 3n\n// 90071992547409914n</code></pre><blockquote>BigInt y Number, no son compatibles entre sí por lo que no podemos hacer operaciones entre ambos.</blockquote><h2 id=\"promise-allsettled-\"><strong>Promise.allSettled()</strong></h2><p>Este método para las promesas viene añadir una característica que le faltaba al <strong>Promise.all()</strong>, el cual era resolver todas las promesas que le pasábamos independientemente de que alguna sea rechazada.</p><p>Recordemos <strong>Promise.all() </strong>lo que hacía es devolver un array con las respuestas de todas nuestras promesas SIEMPRE Y CUANDO NO HAYA SIDO RECHAZADA NINGUNA, en tal caso devolvería el error de la promesa rechazada y perderíamos el valor de las promesas que si fueron exitosas.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">var promise1 = Promise.resolve(3)\nvar promise2 = new Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject('Error from PromiseAll'), 1000))\nvar promises = [promise1, promise2]\n\nPromise.all(promises)\n    .then(results =&gt; console.log(results))\n\n// Output: Uncaught (in promise) Error from PromiseAll</code></pre><figcaption>Respuesta del método all, cuando una promesa es rechazada o tuvo un error</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">var promise1 = Promise.resolve(3)\nvar promise2 = new Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject('Error from PromiseAllSettled'), 1000))\nvar promises = [promise1, promise2]\n\nPromise.allSettled(promises)\n    .then(results =&gt; console.log(results))\n\n/* Output:\n\n[\n   {\n      status: 'fulfilled',\n      value: 3\n   },\n   {\n      status: 'rejected',\n      reason: 'Error from PromiseAllSettled'\n   }\n]\n\n*/</code></pre><figcaption>Respuesta del método allSettled, cuando una promesa es rechazada o tuvo un error</figcaption></figure><p>A diferencia de de <strong>Promise.all(), Promise.allSettled() </strong>devuelve un array de objetos.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">var promise1 = Promise.resolve(3)\nvar promise2 = new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve('Promesa Exitosa'), 1000))\nvar promises = [promise1, promise2]\n\nPromise.all(promises)\n    .then(results =&gt; console.log(results))\n\n// Output: [3, 'Promesa Exitosa']</code></pre><figcaption>Respuesta del método all, cuando todas las promesas fueron exitosas</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">var promise1 = Promise.resolve(3)\nvar promise2 = new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve('Promesa Exitosa'), 1000))\nvar promises = [promise1, promise2]\n\nPromise.allSettled(promises)\n    .then(results =&gt; console.log(results))\n\n/* Output:\n\n[\n   {\n      status: fulfilled,\n      value: 3\n   },\n   {\n      status: 'fulfilled',\n      reason: 'Promesa Exitosa'\n   }\n]\n\n*/</code></pre><figcaption>Respuesta del método allSettled, cuando todas las promesas fueron exitosas</figcaption></figure><p>Entonces en resumen, <strong>Promise.allSettled() </strong>devuelve un array de objetos con los estados de todas las promesas (resueltas y rechazadas) y sus respectivos valores o errores (según sea el caso).</p><h2 id=\"-operador-de-fusi-n-nulo-nullish-coalescing-operator-\"><strong>“Operador de fusión nulo” (Nullish Coalescing Operator)</strong></h2><p>En realidad no supe como traducir esto de una forma comprensible 😢</p><p>Este operador se denota con dos símbolos de interrogación cerrados <strong>??, </strong>su funcionamiento es similar al operador OR, salvo algunas cositas 😁</p><p>Me gustaría explicar estas cositas con ejemplos:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const video = {\n   title: 'My awasome video',\n   views: 0\n}\n\nconst views = video.views || 'Views not available yet'\n// views: 'Views not available yet'</code></pre><figcaption>Evaluando la condición con el operador OR (||)</figcaption></figure><p>Si tenemos esta expresión, ¿Qué valor tendrá nuestra constante <strong>views</strong>?</p><p>Ya sabemos que nuestro video tiene 0 visitas 😥, pero queremos mostrar este valor en algún lado de la aplicación utilizando la constante <strong>views, </strong>lo que estaremos haciendo es mostrar ‘Views not available yet’ y no 0 precisamente porque el operador OR interpreta el cero como falso e inmediatamente se le asigna el valor por defecto.</p><p>Pero esto no está bueno, porque en realidad las views si las tenemos, en este caso es 0, de ser <em>null</em> o <em>undefined </em>si sería correcto asignar el valor por defecto.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const video = {\n   title: 'My awasome video',\n   views: 0\n}\n\nconst views = video.views ?? 'Views not available yet'\n// views: 0</code></pre><figcaption>Evaluando la condición con el operador de fusión nulo (??)</figcaption></figure><p>En resumen (||) es similar a (??), con la única excepción de que último solo contempla valores <em>null</em> o <em>undefined</em> para evaluar la siguiente expresión.</p><h2 id=\"encadenamiento-opcional-optional-chaining-\"><strong>Encadenamiento Opcional (Optional Chaining)</strong></h2><p>Utilizando en el mismo ejemplo del video, que pasa si queremos obtener el nombre del autor a partir del siguiente código:</p><pre><code class=\"language-javascript\">const video = {\n   title: 'My awasome video',\n   views: 0,\n   author: {\n      name: 'Diego'\n   }\n}\n\nconst authorName = video.author.name || 'Unknown'\n// authorName: 'Diego'\n\nconst video2 = {\n   title: 'My awasome video',\n   views: 0\n}\n\nconst authorName2 = video2.author.name || 'Unknown'\n// Output: Uncaught TypeError: Cannot read property 'name' of undefined</code></pre><p>Como verán en <strong>authorName </strong>logramos obtener el nombre del autor del video sin problemas, pero en <strong>authorName2 </strong>obtenemos un error, esto se debe a que la propiedad <strong>author</strong> no existe en el objeto <strong>video2, </strong>debemos verificar si existe antes de intentar recuperarla, una de las formas que teníamos de hacer esto eran las siguientes:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">const video = {\n   title: 'My awesome video',\n   views: 0\n}\n\nconst authorName = (video.author || {}).name || 'Unknown'\n// authorName: 'Unknown'\n\n// OR\n\nconst authorName = video.author &amp;&amp; video.author.name || 'Unknown'\n// authorName: 'Unknown'</code></pre><figcaption>Varias alternativas de acceder de manera segura al nombre del autor</figcaption></figure><p>Estas son solo alguna de las formas que tenemos para acceder a propiedades de objeto de manera segura, y las expresiones pueden llegar a ser mucho más extensas si tenemos muchos subniveles.</p><p>Para solucionar esto llegaron los “Encadenamientos Opcionales” denotados con el símbolo de interrogación cerrado (?) y ubicados antes de cada (.), usando este nuevo operador podemos simplificar nuestra expresión sin obtener errores, el ejemplo anterior quedaría de la siguiente forma:</p><pre><code class=\"language-javascript\">const video = {\n   title: 'My awesome video',\n   views: 0\n}\n\nconst authorName = video.author?.name || 'Unknown'\n// authorName: 'Unknown'</code></pre><p>Si alguna vez trabajaron con angular recordaran que esta característica estaba soportaba en el template de los componentes, pero no en nuestros archivos con typescript.</p><h2 id=\"globalthis\"><strong>GlobalThis</strong></h2><p>Como sabemos JavaScript es un lenguaje multiplaforma, es muy versátil y nos permite platorma. Uno de los inconvenientes que teníamos era poder acceder al objeto “global” de nuestro entorno, y es que según en donde estemos ejecutando nuestro lenguaje la manera de acceder a este objeto global cambiaba.</p><p>Si quisiéramos obtener este objeto global independientemente del entorno, teníamos que realizar algo similar a esto:</p><pre><code class=\"language-javascript\">const globalObject = () =&gt; {\n    if (typeof self !== 'undefined') { return self; } // Web Workers\n    if (typeof window !== 'undefined') { return self; } // Web Workers\n    if (typeof global !== 'undefined') { return self; } // Web Workers\n    throw new Error('can not find globalObject')\n}</code></pre><p>Ahora con el <strong>globalThis </strong>no hace falta, ya que podemos acceder desde cualquier entorno/plataforma con solo llamarlo 😀</p><h2 id=\"conclusi-n\"><strong>Conclusión</strong></h2><p>Estas son las novedades de esta versión más destacadas de esta versión, espero que las hayas entendido y a ¡¡disfrutarlas!!.</p>","comment_id":"5f669903e491f8001e550c82","feature_image":"https://ghost.dartiles.dev/content/images/2020/09/cover.png","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2020-09-19T20:49:23.000-03:00","updated_at":"2020-10-05T00:00:28.000-03:00","published_at":"2020-08-16T20:52:00.000-03:00","custom_excerpt":"Descubre las nuevas características que trae esta nueva versión de nuestro lenguaje favorito Javascript ❤","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5f669a13e491f8001e550caa","name":"Javascript","slug":"javascript","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/javascript/"}],"authors":[{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"}],"primary_author":{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"},"primary_tag":{"id":"5f669a13e491f8001e550caa","name":"Javascript","slug":"javascript","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/javascript/"},"url":"https://ghost.dartiles.dev/novedades-de-ecmascript-2020-o-es11/","excerpt":"Descubre las nuevas características que trae esta nueva versión de nuestro lenguaje favorito Javascript ❤","reading_time":5,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"createdAt":"2020-09-19T20:49:23.000-03:00","desc":"Descubre las nuevas características que trae esta nueva versión de nuestro lenguaje favorito Javascript ❤","image":"media/blog/novedades-de-ecmascript-2020-o-es11/novedades-de-ecmascript-2020-o-es11.png"},{"id":"5f6624d6d10169001e91e82e","uuid":"bac02383-ee81-4c7c-910d-6cf3b9b90be0","title":"Los Frontends Developers","slug":"aprende-mas-sobre-los-frontend-developers","html":"<p>En este artículo quiero hablar sobre quienes son los Frontend Developers y cuales son sus funciones en el mundo de la programación.</p><h2 id=\"-qu-es-un-frontend-developer\">¿Qué es un Frontend Developer?</h2><p>Un Frontend Developer es el responsable de desarrollar la interfaz visual y la interacción de una página web con el usuario, todo esto conforma el código fuente que el navegador leerá para mostrar la aplicación, es decir, un Frontend Developer es el encargado de lo que el usuario ve.</p><p>Un sencillo ejemplo de esto es la plataforma en la que estás leyendo este artículo, LinkedIn. Como sabemos esta sufrió un cambio en su interfaz ya que no era tan agradable como la conocemos hoy en día, para realizar este cambio el equipo de desarrollo necesita a los Web Designers, encargados de armar la presentación visual de la página web en un formato PSD (Adobe Photoshop) o cualquier otro, y por supuesto a los Web Developers quienes se encargarán de llevar a la web dicha \"presentación visual\".</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-linkedin.jpg\" loading=\"lazy\" class=\"kg-image\" alt srcset=\"./media/blog/aprende-mas-sobre-los-frontend-developers/size-w600-2020-09-linkedin.jpg 600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1000-2020-09-linkedin.jpg 1000w, ./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-linkedin.jpg 1200w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Comparación de las versiones de LinkedIn</figcaption></figure><h2 id=\"subconjuntos-dentro-del-frontend\">Subconjuntos dentro del Frontend</h2><p>Dentro de este rol hay quienes prefieren enfocarse en el área de diseño, mientras que otros en el área de la funcionalidad. Es por eso, por lo que a mi juicio este rol se divide en dos subconjuntos:</p><h3 id=\"dise-ador-web-y-maquetador-web\">Diseñador web y Maquetador web</h3><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-frontend.jpg\" loading=\"lazy\" class=\"kg-image\" alt srcset=\"./media/blog/aprende-mas-sobre-los-frontend-developers/size-w600-2020-09-frontend.jpg 600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1000-2020-09-frontend.jpg 1000w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1600-2020-09-frontend.jpg 1600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-frontend.jpg 1640w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Una persona diseñando/maquetando</figcaption></figure><p>Un <strong>diseñador web,</strong> como su nombre lo indica es el responsable del diseño de la web. Su función es establecer los colores, el posicionamiento de los elementos, tales como el menú, los botones, los banners, las imágenes, entre otros.</p><p>Los diseñadores web crean contenidos gráficos ya sea imágenes o videos, generalmente utilizando herramientas como Adobe Dreamweaver, Adobe Illustrator y/o Adobe Photoshop.</p><p>Una vez culminado el trabajo del diseñador, entra en juego el <strong>maquetador web</strong>. Esta persona es la responsable de traducir a código el diseño de la interfaz, manteniendo una similitud entre ellas. Generalmente esta persona debe trabajar en el Responsive Design, es decir, adaptar la interfaz de la web según el dispositivo que se esté utilizando para visitarla.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-responsive.jpg\" loading=\"lazy\" class=\"kg-image\" alt srcset=\"./media/blog/aprende-mas-sobre-los-frontend-developers/size-w600-2020-09-responsive.jpg 600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1000-2020-09-responsive.jpg 1000w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1600-2020-09-responsive.jpg 1600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-responsive.jpg 2232w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Responsive Design</figcaption></figure><p>Los maquetadores web para llevar acabo su trabajo deben tener conocimiento en HTML que sirve para dar la estructura de tu proyecto, CSS esencial para aplicar estilos y Javascript (si aplica) fundamental para implementar la interactividad.</p><h3 id=\"desarrollador-web\">Desarrollador Web</h3><p>Un Desarrollador Web es el encargado de la parte funcional de una página web.</p><p>La validación de formularios, el consumo de APIs (método de comunicación entre dos aplicaciones), guardar datos en LocalStorage (memoria del navegador) está dentro de las funciones que éste ejerce como Frontend.</p><figure class=\"kg-card kg-image-card\"><img src=\"./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-coding.jpg\" loading=\"lazy\" class=\"kg-image\" alt srcset=\"./media/blog/aprende-mas-sobre-los-frontend-developers/size-w600-2020-09-coding.jpg 600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-coding.jpg 702w\"></figure><p>En LinkedIn, para que el botón \"+ Seguir\" funcione se debió haber añadido una acción al ser presionado, al igual que este botón, muchos de los elementos de esta plataforma tienen asociado una acción que se debe cumplir en base a lo que el usuario realice.</p><p>Quiero recalcar que la lista de funciones es muy extensa, tanto así que sale del marco de lo que es un Frontend Developer.</p><p>Hay tareas como por ejemplo guardar los datos de los usuarios en una base de datos, la comunicación entre usuarios en un chat, que son imposibles de hacer para un Frontend Developer, ya que son tareas del Backend Developer.</p><p>Las tecnologías que solemos usar son HTML, CSS y Javascript. Sin embargo, nos regimos de frameworks de Javascript como Angular, React, Vue.js o Ember.js y frameworks de CSS como Bootstrap o Foundation para facilitar nuestro trabajo.</p><h2 id=\"-cu-l-es-mi-rea\"><strong>¿Cuál es mi área?</strong></h2><p>Si bien es cierto que tengo conocimientos en el diseño porque sé manejar Adobe Photoshop y hago propuestas (directas en el código) para que una aplicación luzca mejor, lo que más me apasiona es el dinamismo que pueda llegar a tener una aplicación, me gusta mucho ordenar datos según un criterio, crear buscadores para filtrar datos y, sobre todo, me gusta que cada una de las cosas, sean lo más amigable posible para el usuario.</p><p>En conclusión, ambas áreas son de mi agrado, pero me inclino más en el desarrollo.</p><h2 id=\"descubre-m-s-\">Descubre más...</h2><figure class=\"kg-card kg-embed-card\"><iframe width=\"612\" height=\"344\" src=\"https://www.youtube.com/embed/Tl0x_zf8I78?feature=oembed\" loading=\"lazy\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><h2 id=\"ya-hemos-llegado-al-final-\"><strong>Ya hemos llegado al final...</strong></h2><p>Antes de finalizar quisiera que recomendaran y compartieran este contenido, para ayudar a la comunidad a aprender un poco más sobre los Frontend Developers.</p><p>Igualmente quienes deseen dejar un comentario es bienvenido, estoy abierto a sus opiniones, criticas o sugerencias.</p><p>Muchas gracias.</p>","comment_id":"5f6624d6d10169001e91e82e","feature_image":"https://ghost.dartiles.dev/content/images/2020/09/cover.jpg","featured":false,"visibility":"public","send_email_when_published":false,"created_at":"2020-09-19T12:33:42.000-03:00","updated_at":"2020-10-07T00:00:16.000-03:00","published_at":"2017-09-16T17:00:00.000-03:00","custom_excerpt":"Descubre las diferencias entre Maquetadores y Desarrolladores Frontend 😁","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"tags":[{"id":"5f556bcfcf1401001e663201","name":"general","slug":"general","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/general/"}],"authors":[{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"}],"primary_author":{"id":"1","name":"Diego Artiles","slug":"dartiles","profile_image":"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"meta_title":null,"meta_description":null,"url":"https://ghost.dartiles.dev/author/dartiles/"},"primary_tag":{"id":"5f556bcfcf1401001e663201","name":"general","slug":"general","description":null,"feature_image":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"url":"https://ghost.dartiles.dev/tag/general/"},"url":"https://ghost.dartiles.dev/aprende-mas-sobre-los-frontend-developers/","excerpt":"Descubre las diferencias entre Maquetadores y Desarrolladores Frontend 😁","reading_time":3,"access":true,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Que es un Frontend Developer","meta_description":"Descubre que que es ser Frontend Developer, las diferencias entre un maquetador web y un diseñador web y mucho más.","email_subject":null,"createdAt":"2020-09-19T12:33:42.000-03:00","desc":"Descubre las diferencias entre Maquetadores y Desarrolladores Frontend 😁","image":"media/blog/aprende-mas-sobre-los-frontend-developers/aprende-mas-sobre-los-frontend-developers.png"}]