import{Y as Je,S as me,i as pe,s as ge,K as we,e as _,k as U,c as y,a as S,d as h,n as N,b as c,f as te,F as u,M as je,N as qe,O as Ee,x as V,u as W,t as F,g as L,U as ie,H as oe,h as ce,Q as Se,j as Q,m as Y,o as $,v as K,r as Ge,w as We,T as Xe,Z as He,J as Ae,_ as Qe,P as Ye,A as $e,$ as Ke,a0 as Ze,a1 as et,V as tt,W as ot,E as ze,a2 as De}from"../../chunks/vendor-b9d0e3a8.js";import{P as at,t as Me,r as Ie}from"../../chunks/PostItem-0c7b0de3.js";import{s as fe}from"../../chunks/analytics-68a27184.js";const nt=()=>{const e=Je("__svelte__");return{page:{subscribe:e.page.subscribe},navigating:{subscribe:e.navigating.subscribe},get preloading(){return console.error("stores.preloading is deprecated; use stores.navigating instead"),{subscribe:e.navigating.subscribe}},session:e.session}};const st=e=>({}),Ce=e=>({}),rt=e=>({}),Te=e=>({});function it(e){let t,o,a,l;const i=e[1]["fr-1"],m=we(i,e,e[0],Te),g=e[1]["fr-2"],r=we(g,e,e[0],Ce);return{c(){t=_("div"),o=_("div"),m&&m.c(),a=U(),r&&r.c(),this.h()},l(n){t=y(n,"DIV",{class:!0});var s=S(t);o=y(s,"DIV",{class:!0});var d=S(o);m&&m.l(d),d.forEach(h),a=N(s),r&&r.l(s),s.forEach(h),this.h()},h(){c(o,"class","grid-layaout-2fr__container svelte-1vlbv7h"),c(t,"class","grid-layaout-2fr svelte-1vlbv7h")},m(n,s){te(n,t,s),u(t,o),m&&m.m(o,null),u(t,a),r&&r.m(t,null),l=!0},p(n,[s]){m&&m.p&&(!l||s&1)&&je(m,i,n,n[0],l?Ee(i,n[0],s,rt):qe(n[0]),Te),r&&r.p&&(!l||s&1)&&je(r,g,n,n[0],l?Ee(g,n[0],s,st):qe(n[0]),Ce)},i(n){l||(V(m,n),V(r,n),l=!0)},o(n){W(m,n),W(r,n),l=!1},d(n){n&&h(t),m&&m.d(n),r&&r.d(n)}}}function lt(e,t,o){let{$$slots:a={},$$scope:l}=t;return e.$$set=i=>{"$$scope"in i&&o(0,l=i.$$scope)},[l,a]}class ct extends me{constructor(t){super();pe(this,t,lt,it,ge,{})}}var dt=[{id:"60eb0fac9b9799001eba3160",uuid:"50007fc0-ee97-4c23-8632-7c19ee1f0647",title:"Optional chaining without ES11? - Safely Access - Javascript Tips & Tricks",slug:"optional-chaining-without-es11-safely-access",html:`<p>As you know, <strong>every year EcmaScript releases a new version to improve JavaScript</strong>, these improvements have made our lives easier, and have allowed us to do things that we could not do with the language natively before, or that required many lines of code.<br><br>In this post we will talk a little bit about <strong>optional chaining</strong> <em>(implemented in ES11/ES2020 version)</em> instead of all the improvements introduced. For those who do not know, <strong>optional chaining is a functionality that allows us to safely access properties of objects in javascript, avoiding common errors such as <em>"Can not read property foo of undefined".</em></strong></p><p>Suppose we want to get the amount of apples from fruit objects has only bananas. Let's see what result we get with and without "optional chaining". I leave you an example</p><pre><code class="language-javascript">const fruits =  {
	bananas: {
        quantity: 12
    }
}

fruits.apples.quantity // ERROR: Cannot read property 'quantity' of undefined

// With optional chaining
fruits.apples?.quantity // undefined</code></pre><p>As I mentioned earlier, this functionality was introduced in ES11, but what alternatives were there before for this? \xA0Let's see some of them \u{1F680}</p><h2 id="optional-chaining-with-or-operator"><strong>"Optional chaining" with OR operator</strong></h2><p>As we know, javascript parentheses are used to evaluate an expression, so for the previous example we can check if "apple" exists in the fruits object before accessing the next property.</p><p>To do that we can use the OR operator like this.</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">(fruits.apples || {}).quantity // undefined</code></pre><figcaption>Safely access with OR operator</figcaption></figure><!--kg-card-begin: markdown--><p>In this example, the operator will return the value of apples if it isn't falsy value, otherwise <code>{}</code></p>
<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><p>In other words, we have <code>(undefined || {}).quantity</code> literally, so it is safe to access &quot;quantity&quot; from an empty object and not from an <code>undefined</code> value.</p>
<!--kg-card-end: markdown--><h2 id="optional-chaining-with-and-operator"><strong>"Optional chaining" with AND operator</strong></h2><p>This is the most common option and perhaps the longest. Using the same example with the AND operator, it looks like this:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">fruits.apples &amp;&amp; fruites.apples.quantity // undefined</code></pre><figcaption>Safely access with AND operator</figcaption></figure><h2 id="safely-access-to-properties-with-default-parameters"><strong>Safely access to properties with default parameters</strong></h2><p>If we want to safely access the property of an object through a function parameter, we can use the previous alternatives or use the default parameter (implemented in ES6).</p><p>I leave you an example:</p><pre><code class="language-javascript">const fruits =  {
	bananas: {
        quantity: 12
    }
}

const getFruitQuantity = (fruit = {}) =&gt; {
    return fruit.quantity
}

getFruitQuantity(fruits.apples) // undefined</code></pre><h2 id="useful-functions-for-more-complex-objects-"><strong>Useful functions for more complex objects.</strong></h2><p>With some of these alternatives <strong>we can build a function that helps us access more complex object properties.</strong> <br><br>Using the fruits object:</p><pre><code class="language-javascript">const fruits =  {
	bananas: {
        quantity: 12
    }
}</code></pre><p><br>I leave you some examples found on the net:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">get = function(obj, key) {
    return key.split(".").reduce(function(o, x) {
        return (typeof o == "undefined" || o === null) ? o : o[x];
    }, obj);
}

/* Usage */
get(fruits, 'apples.quantity') // undefined</code></pre><figcaption><a href="https://newbedev.com/javascript-elegant-way-to-check-nested-object-properties-for-null-undefined">Click here to go to the source</a></figcaption></figure><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const getNestedObject = (nestedObj, pathArr) =&gt; {
    return pathArr.reduce(
      (obj, key) =&gt; (obj &amp;&amp; obj[key] !== 'undefined' ? obj[key] : null),
      nestedObj
    );
};

/* Usage */
getNestedObject(fruits, ['apples', 'quantity']) // null</code></pre><figcaption><a href="https://gist.github.com/marcandrewb/1d5b4deaac541fc9c61c3f06f9555353">Click here to go to the source</a></figcaption></figure><h2 id="is-it-just-to-access-objects"><strong>Is it just to access objects?</strong></h2><p>Throughout this post, I have only mentioned the properties of objects, so does it work for objects only? </p><p>The answer is NO. \u{1F913}</p><p>We can use both the mentioned alternatives and the "optional chaining", to access elements of arrays or execute functions in a safe way. I leave you some examples:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const someObject = null

// OR operator
((someObject || {}).someFunction || function(){} )() // undefined

// AND operator
typeof someObject === 'object' &amp;&amp; typeof someObject.someFunction === 'function' &amp;&amp; someObject.someFunction() // undefined

// Optional Chaining
someObject?.someFunction?.()</code></pre><figcaption>Function Invocation</figcaption></figure><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const someObject = null
const someArray = null

// OR operator
((someObject || {}).someArray || [])[0] // undefined

// AND operator
typeof someObject === 'object' &amp;&amp; typeof someObject.someArray === 'object' &amp;&amp; someObject.someArray[0] // undefined

// Optional Chaining
someObject?.someArray?.[0]</code></pre><figcaption>Array index.</figcaption></figure><h2 id="conclusion"><strong>Conclusion</strong></h2><p>As you can see of the three ways learned, the longest is with the AND operator, but none is as short as the "optional chaining".</p><p>These types of errors are common and frequent, so it is necessary to know how to handle and avoid them.</p><blockquote>If you find inconsistencies in the writing of this post or if on the contrary it is okay, please let me know in the comments section, English is not my native language but I try to express myself as best I can \u{1F917}</blockquote><p>Do you like <strong>microfrontends</strong> or have you heard of them? Be aware that I will talk about them soon</p>`,comment_id:"60eb0fac9b9799001eba3160",feature_image:"https://ghost.dartiles.dev/content/images/2021/07/Post-Covers.png",featured:!1,visibility:"public",send_email_when_published:!1,created_at:"2021-07-11T12:35:08.000-03:00",updated_at:"2021-07-11T21:09:06.000-03:00",published_at:"2021-07-11T20:02:01.000-03:00",custom_excerpt:"Learn a bit about safely access in Javascript and many ways to achieve it without optional chaining. Come, surely learn something new together. ",codeinjection_head:null,codeinjection_foot:null,custom_template:null,canonical_url:null,tags:[{id:"5f669a13e491f8001e550caa",name:"Javascript",slug:"javascript",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/javascript/"}],authors:[{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"}],primary_author:{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"},primary_tag:{id:"5f669a13e491f8001e550caa",name:"Javascript",slug:"javascript",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/javascript/"},url:"https://ghost.dartiles.dev/optional-chaining-without-es11-safely-access/",excerpt:"Learn a bit about safely access in Javascript and many ways to achieve it without optional chaining. Come, surely learn something new together. ",reading_time:3,access:!0,og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,email_subject:null,createdAt:"2021-07-11T12:35:08.000-03:00",desc:"Learn a bit about safely access in Javascript and many ways to achieve it without optional chaining. Come, surely learn something new together. ",image:"media/blog/optional-chaining-without-es11-safely-access/optional-chaining-without-es11-safely-access.png"},{id:"5faf3f832e01b8001e3cbd76",uuid:"811ac63d-c41a-4816-a76f-3eba0786638e",title:"Cosas que quiz\xE1s no sab\xEDas de React",slug:"cosas-que-quizas-no-sabias-de-react",html:`<p>Alguna vez te has preguntando <strong>\xBFC\xF3mo funciona el m\xE9todo render de ReactDOM? \xBFPor qu\xE9 hay que importar React cada vez que creamos un componente? </strong> Esto y m\xE1s te ense\xF1are en este art\xEDculo. \u2764</p><h2 id="-c-mo-funciona-el-m-todo-render-de-reactdom">\xBFC\xF3mo funciona el m\xE9todo render de ReactDOM?</h2><p>Este m\xE9todo es similar a <strong>document.appendChild() </strong>la diferencia consiste en que <strong>ReactDOM </strong>nos permite "incrustar" elementos de <strong>React </strong>en un contenedor y con <strong>appendChild </strong>solo podemos hacerlo con elementos HTML.</p><!--kg-card-begin: markdown--><p>Otra de las diferencias que existen entre estos dos m\xE9todos, es que <strong>appendChild()</strong> hace un push del elemento al contenedor (lo que quiere decir que los elementos existentes se mantienen y se agrega uno nuevo), en cambio <strong>el render de React DOM reemplaza totalmente el contenido del contenedor</strong>, basicamente ser\xEDa un <code>container.innerHTML</code></p>
<!--kg-card-end: markdown--><p>Mencionado esto, podemos agregar un spinner en el contenedor donde se renderizar\xE1 nuestra aplicaci\xF3n y este desaparecer\xE1 autom\xE1ticamente en el montaje de la app \u{1F914}.</p><pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="es"&gt;

&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
	&lt;meta name="viewport" content="width=, initial-scale="&gt;
	&lt;title&gt;Dartiles Dev&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
	&lt;div id="root"&gt;
		&lt;p&gt;Este contenido ser\xE1 reemplazado por el m\xE9todo render de React DOM o se mantendr\xE1 si usamos el appendChild&lt;/p&gt;
	&lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre><p>Suponiendo que tenemos este <strong>HTML</strong> podemos agregar contenido con <strong>appendChild</strong> y <strong>render.</strong></p><p>Veamos un ejemplo: </p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const dartilesTitle = document.createElement("h1");

dartilesTitle.innerHTML = "Estas en dartiles.dev";

const container = document.getElementById("root");

container.appendChild(dartilesTitle);
</code></pre><figcaption>A\xF1adiendo un h1 a nuestro contenedor con <strong>appendChild</strong></figcaption></figure><figure class="kg-card kg-code-card"><pre><code class="language-jsx">import React from 'react'
import ReactDOM from 'react-dom'

const dartilesTitle = &lt;h1&gt;Est\xE1s en dartiles.dev&lt;/h1&gt;

const container = document.getElementById('root')

ReactDOM.render(dartilesTitle, container)</code></pre><figcaption>A\xF1adiendo un h1 a nuestro contenedor con <strong>ReactDOM</strong></figcaption></figure><p>Una forma de aprender a identificar el m\xE9todo render de ReactDOM es recordar que <strong>el primer par\xE1metro del m\xE9todo se refiere a que queremos renderizar,</strong> es decir, el elemento que queremos a\xF1adir, mientras que<strong> el segundo se refiere a donde a\xF1adirlo</strong>; en que contenedor.</p><!--kg-card-begin: html--><p>Te dejo un <a target="_blank" href="https://stackblitz.com/edit/cosas-que-no-sabias-de-react?file=src/index.js">link</a> en stackblitz con el <code>setTimeout</code> para que puedas observar lo que pasa con los dos m\xE9todos \u{1F601} </p><!--kg-card-end: html--><h2 id="-por-qu-hay-que-importar-react-cada-vez-que-creamos-un-componente">\xBFPor qu\xE9 hay que importar React cada vez que creamos un componente?</h2><!--kg-card-begin: markdown--><p>Como te habr\xE1s fijado en el ejemplo de React, hacemos un <code>import React from 'react'</code> pero aparentemente en ning\xFAn lado lo usamos y si comentamos esta linea ocurre un error que nos dice que <code>React is not defined</code></p>
<!--kg-card-end: markdown--><p>Entonces, <strong>\xBFPor qu\xE9 nos aparece este error si no estamos usando expl\xEDcitamente React?</strong> Bien para encontrar la respuesta a nuestra pregunta, primero debemos saber <strong>que pasa por detr\xE1s cuando escribimos c\xF3digo JSX.</strong></p><p>Cuando nosotros estamos escribiendo <strong>JSX </strong>(enti\xE9ndase jsx como el "html" dentro de javascript), al final babel est\xE1 transformando ese c\xF3digo a <strong>React.createElement()</strong>, ve\xE1moslo mucho mejor con un ejemplo:</p><pre><code class="language-jsx">/* ANTES DE LA COMPILACI\xD3N */

import React from 'react'

const dartilesContainer = &lt;div&gt;Est\xE1s en dartiles.dev&lt;/div&gt;

/* DESPU\xC9S DE LA COMPILACI\xD3N */

import React from 'react';

const dartilesContainer = React.createElement("div", null, "Est\xE1s en dartiles.dev"); 
// El c\xF3digo JSX desaparece y se convierte en React.createElement</code></pre><p>Es por eso que siempre necesitamos importar <strong>React </strong>al crear un componente o al utilizar c\xF3digo JSX, si bien es cierto hay frameworks como <strong>NextJS </strong>que hacen este trabajo por nosotros, en React no es as\xED, al menos en las versiones anteriores a la 17.</p><p>Si nos vamos m\xE1s a profundidad <strong>React.createElement </strong>crea un un objeto que contiene la informaci\xF3n que React va a leer para crear elementos en el DOM. Partiendo del ejemplo anterior, algunas propiedades principales del objeto resultante es el siguiente:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const dartilesContainer = {
    type: 'div',
    props: {
        children: 'Est\xE1s en dartiles.dev'
    }
}</code></pre><figcaption>Objeto resultante de <strong>React.createElement</strong></figcaption></figure><p>Como te podr\xE1s imaginar si tuvi\xE9ramos que escribir nuestro componentes con <strong>React.createElement</strong> directamente nuestros archivos crecer\xEDan dr\xE1sticamente, adem\xE1s de que se ser\xEDa engorroso trabajar con ellos. Es por eso que JSX existe, para simplificar nuestro c\xF3digo y hacernos m\xE1s f\xE1cil la vida a la hora de crear componentes con \xE9l.</p><h2 id="-cu-ndo-no-importar-react">\xBFCu\xE1ndo NO importar React?</h2><p>Muy probablemente hayas importado <strong>React </strong>al crear <strong>custom hooks, </strong>porque te acostumbraste que cada vez que creamos un nuevo archivo hab\xEDa que hacer esto y lo cierto es que no, solamente tienes que importarlo cuando veas c\xF3digo <strong>JSX</strong>; de igual forma no podr\xE1s olvidarte de hacerlo porque tu aplicaci\xF3n dar\xE1 error.</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">import { useState } from "react";

export const useHook = () =&gt; {
  const [state, setState] = useState("Est\xE1s en dartiles.dev");

  return [state, setState];
};
</code></pre><figcaption>Para este ejemplo NO es necesario importar, basta solamente con <strong>useState</strong></figcaption></figure><h2 id="-qu-es-el-virtual-dom">\xBFQu\xE9 es el Virtual DOM?</h2><p>Seguramente en tu proceso de aprendizaje de React habr\xE1s visto el t\xE9rmino "Virtual DOM", si est\xE1s un poco m\xE1s experimentado sabr\xE1s que DOM se refiere al <strong>Document Object Model,</strong> la API para representar documentos HTML/XML. </p><p>Ahora que sabemos que Virtual DOM y DOM son cosas distintas, llam\xE9moslo <strong>VDOM</strong> y <strong>DOM</strong> respectivamente.</p><p>La palabra Virtual sirve m\xE1s que nada para diferenciarlo del DOM, su funci\xF3n es crear un "bridge" o puente entre nuestra aplicaci\xF3n y el DOM, manteniendo el memoria el estado de la aplicaci\xF3n y una copia del DOM. </p><p>Gracias a que <strong>React mantiene en memoria el DOM</strong>, cada vez que se produzca un cambio en alg\xFAn componente se actualiza el VDOM, luego de eso se compara el VDOM anterior con el nuevo y la diferencia entre estas versiones es finalmente reflejada en el DOM. </p><p>Esto hace que se manipule \xFAnicamente las secciones que cambiaron y no todo el \xE1rbol del DOM, obteniendo as\xED mejor performance para nuestra aplicaci\xF3n.</p><!--kg-card-begin: markdown--><p><em><mark>Lo explicado anteriormente es similar a lo que hace <strong>git</strong>, detecta que partes cambiaron y los almacena, y al hacer el merge se unifican los cambios.</mark></em></p>
<!--kg-card-end: markdown--><p>Te dejo a continuaci\xF3n una imagen que encontr\xE9 por internet que te ayudar\xE1 a entender mucho mejor este concepto:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="./media/blog/cosas-que-quizas-no-sabias-de-react/2020-11-image.png" loading="lazy" class="kg-image" alt srcset="./media/blog/cosas-que-quizas-no-sabias-de-react/size-w600-2020-11-image.png 600w, ./media/blog/cosas-que-quizas-no-sabias-de-react/2020-11-image.png 900w" sizes="(min-width: 720px) 720px"><figcaption>Representaci\xF3n gr\xE1fica del funcionamiento del VDOM. Fuente: https://www.cronj.com/</figcaption></figure><h2 id="conclusiones">Conclusiones</h2><p>Este es un resumen de cositas que quiz\xE1s no sab\xEDas, hay mucho m\xE1s y m\xE1s profundas \u{1F913}, te invito a decirme en los <strong>comentarios</strong> que crees que falto a\xF1adir en este art\xEDculo y <strong>compartir este art\xEDculo</strong> para los que est\xE1n inciando en el aprendizaje de React \u2764</p>`,comment_id:"5faf3f832e01b8001e3cbd76",feature_image:"https://ghost.dartiles.dev/content/images/2020/11/cosas-que-quizas-no-sabias-de-react.png",featured:!1,visibility:"public",send_email_when_published:!1,created_at:"2020-11-13T23:22:59.000-03:00",updated_at:"2020-11-23T18:56:11.000-03:00",published_at:"2020-11-22T10:48:19.000-03:00",custom_excerpt:"\xBFPor qu\xE9 siempre hay que importar React al crear nuestros componentes? \xBFQu\xE9 hace JSX por detr\xE1s? \xBFQu\xE9 es el Virtual DOM? Desc\xFAbrelo en este art\xEDculo \u2764",codeinjection_head:null,codeinjection_foot:null,custom_template:null,canonical_url:null,tags:[{id:"5f8ced9d62d1f8001edf372d",name:"React",slug:"react",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/react/"}],authors:[{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"}],primary_author:{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"},primary_tag:{id:"5f8ced9d62d1f8001edf372d",name:"React",slug:"react",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/react/"},url:"https://ghost.dartiles.dev/cosas-que-quizas-no-sabias-de-react/",excerpt:"\xBFPor qu\xE9 siempre hay que importar React al crear nuestros componentes? \xBFQu\xE9 hace JSX por detr\xE1s? \xBFQu\xE9 es el Virtual DOM? Desc\xFAbrelo en este art\xEDculo \u2764",reading_time:4,access:!0,og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:"\xBFPor qu\xE9 siempre hay que importar React al crear nuestros componentes? \xBFQu\xE9 hace JSX por detr\xE1s? \xBFQu\xE9 es el Virtual DOM? Desc\xFAbrelo en este art\xEDculo \u2764",email_subject:null,createdAt:"2020-11-13T23:22:59.000-03:00",desc:"\xBFPor qu\xE9 siempre hay que importar React al crear nuestros componentes? \xBFQu\xE9 hace JSX por detr\xE1s? \xBFQu\xE9 es el Virtual DOM? Desc\xFAbrelo en este art\xEDculo \u2764",image:"media/blog/cosas-que-quizas-no-sabias-de-react/cosas-que-quizas-no-sabias-de-react.png"},{id:"5fa21994eadbac001ea7cacb",uuid:"6738ce95-d597-4101-b7b5-35e08ace98e8",title:"Escribe c\xF3digo JSX m\xE1s r\xE1pido - Como activar Emmet en React",slug:"escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react",html:`<!--kg-card-begin: markdown--><p>Si alguna vez usaste <strong>Emmet</strong> sabr\xE1s de que estoy hablando, para los que no lo conozcan <strong>son un conjunto de snippets que nos permite escribir c\xF3digo mucho m\xE1s r\xE1pido.</strong> Generalmente se suele usar en archivos <code>html</code> o <code>css</code> y sus preprocesadores.</p>
<p>Sin embargo, soporta otros tipos de archivos o lenguajes que por defecto no est\xE1n habilitados. En este articulo te ense\xF1ar\xE9 a <strong>como activar emmet en archivos js/jsx desde Visual Studio Code</strong>.</p>
<!--kg-card-end: markdown--><h2 id="escribiendo-componentes-con-y-sin-emmet"><strong>Escribiendo componentes con y sin Emmet</strong></h2><p>Para los que suelen ser m\xE1s visuales (como yo) les voy a mostrar que vamos a lograr con esto a trav\xE9s de algunos gifs que hice para ustedes \u{1F60E}</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-WithoutEmmet.gif" loading="lazy" class="kg-image" alt><figcaption>Escribiendo c\xF3digo JSX sin Emmet</figcaption></figure><figure class="kg-card kg-image-card kg-width-full kg-card-hascaption"><img src="./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-WithEmmet.gif" loading="lazy" class="kg-image" alt><figcaption>Escribiendo c\xF3digo JSX con Emmet</figcaption></figure><h2 id="como-activar-emmet-para-nuestros-componentes-de-react"><strong>Como activar Emmet para nuestros componentes de React</strong></h2><p>Para agregar al soporte de <strong>Emmet </strong>en <strong>Visual Studio Code </strong>debemos ir a las configuraciones del usuario para eso hay muchas formas de llegar ah\xED, la m\xE1s conocida es ir al men\xFA principal <strong>(File &gt; Preferences &gt; Settings)</strong></p><!--kg-card-begin: markdown--><p>Otra opci\xF3n es acceder a las configuraciones del IDE con las combinaciones de teclas <code>ctrl</code> + <code>,</code> en Windows, desconozco el atajo para Mac pero tranquilo hay muchas formas de llegar hasta ac\xE1.</p>
<p>Una vez ah\xED busquemos &quot;Emmet&quot; y luego vayamos a la secci\xF3n donde dice <strong>Emmet: Include Languagues</strong> y damos clic en el bot\xF3n <strong>Add Item</strong>, en la descripci\xF3n de este apartado tenemos un par de ejemplos para habilitar el soporte en otros tipos de archivos o lenguajes.</p>
<p>Para activar el soporte para javascript debemos agregar como <strong>item</strong> <code>javascript</code> y como <strong>value</strong> <code>javascriptreact</code></p>
<!--kg-card-end: markdown--><blockquote>Esta funcionalidad sirve tanto para archivos <strong>.js</strong> como para archivos <strong>.jsx</strong></blockquote><figure class="kg-card kg-image-card kg-width-full kg-card-hascaption"><img src="./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-ActivateEmmet.gif" loading="lazy" class="kg-image" alt><figcaption>Activando el soporte de Emmet en los configuraciones del usuario</figcaption></figure><!--kg-card-begin: markdown--><p>Si preferimos editar las configuraciones desde el formato JSON, podemos presionar las teclas <code>ctrl</code> + <code>shift</code> + <code>p</code>, escribimos <strong>settings</strong> y seleccionamos la opci\xF3n que trae entre par\xE9ntesis <strong>JSON</strong>, se nos abrir\xE1 un JSON en el cual debemos agregar un key m\xE1s que se llame <strong>emmet.includeLanguages</strong>; \xE9ste ser\xE1 un objeto con una key llamada <code>javascript</code> cuyo value debe ser <code>javascriptreact</code></p>
<!--kg-card-end: markdown--><figure class="kg-card kg-image-card kg-width-full kg-card-hascaption"><img src="./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-ActivateEmmet2.gif" loading="lazy" class="kg-image" alt><figcaption>Activando el soporte de Emmet en los configuraciones del usuario (JSON)</figcaption></figure><p>Una vez hecho cualquiera de estas opciones, no hace falta reiniciar nuestro editor podemos ir a nuestro archivo de javascript y podemos escribir JSX m\xE1s r\xE1pido.</p><p>Adem\xE1s de escribir elementos de html comunes y corrientes, tambi\xE9n podemos <strong>escribir componentes de React</strong>. Te dejo un peque\xF1o ejemplo: </p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="./media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/2020-11-Emmet-Components.gif" loading="lazy" class="kg-image" alt><figcaption>Escribiendo componentes de React con Emmet</figcaption></figure><h2 id="conclusiones"><strong>Conclusiones</strong></h2><!--kg-card-begin: html--><p>Emmet tiene un mont\xF3n de configuraciones y opciones que en este art\xEDculo no explicar\xE9, pero si quer\xEDa dejarles saber que pueden explorarlas una a una a trav\xE9s de este <a href="https://code.visualstudio.com/docs/editor/emmet" target="_blank" rel="nofollow noopener noreferrer">link</a>.<p><!--kg-card-end: html--><p>Much\xEDsimas gracias por llegar hasta ac\xE1, espero que hayas aprendido algo nuevo y si te gustan este tipo de material d\xE9jamelo saber en los <strong>comentarios </strong>\u2764\u2764</p>`,comment_id:"5fa21994eadbac001ea7cacb",feature_image:"https://ghost.dartiles.dev/content/images/2020/11/carbon.png",featured:!1,visibility:"public",send_email_when_published:!1,created_at:"2020-11-04T00:01:40.000-03:00",updated_at:"2020-11-05T22:07:06.000-03:00",published_at:"2020-11-04T00:03:59.000-03:00",custom_excerpt:"Descubre como escribir tus componentes en React mucho m\xE1s r\xE1pido con Emmet \u{1F92F}",codeinjection_head:null,codeinjection_foot:null,custom_template:null,canonical_url:null,tags:[{id:"5f8ced9d62d1f8001edf372d",name:"React",slug:"react",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/react/"}],authors:[{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"}],primary_author:{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"},primary_tag:{id:"5f8ced9d62d1f8001edf372d",name:"React",slug:"react",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/react/"},url:"https://ghost.dartiles.dev/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/",excerpt:"Descubre como escribir tus componentes en React mucho m\xE1s r\xE1pido con Emmet \u{1F92F}",reading_time:3,access:!0,og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:"Descubre como escribir tus componentes en React mucho m\xE1s r\xE1pido con Emmet \u{1F92F}",email_subject:null,createdAt:"2020-11-04T00:01:40.000-03:00",desc:"Descubre como escribir tus componentes en React mucho m\xE1s r\xE1pido con Emmet \u{1F92F}",image:"media/blog/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react/escribe-codigo-jsx-mas-rapido-como-activar-emmet-en-react.png"},{id:"5f98b578e67152001e735162",uuid:"1572f496-62b4-4194-8419-3a8c5b7b164d",title:"useEffect, el hook de efecto de React - Ciclos de vidas en componentes funcionales",slug:"useeffect-react-hooks-ciclos-de-vida",html:`<!--kg-card-begin: html--><p>Adem\xE1s del useState, el hook useEffect es uno de los m\xE1s usados en React. Anteriormente ya explicamos <a href="https://dartiles.dev/blog/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos" target="_blank">como funciona el useState y como usarlo con arrays y objetos</a>, y ahora es el momento de este hook \u{1F917}</p><!--kg-card-end: html--><h2 id="ciclos-de-vidas-en-componentes-funcionales"><strong>Ciclos de vidas en componentes funcionales</strong></h2><p>Antes en React (versiones inferiores a la 16.8) dispon\xEDamos de varias funciones heredadas de la clase Component, que nos permit\xEDan acceder a diferentes momentos del ciclo de vida de nuestro componente (montaje, actualizaci\xF3n y desmontaje) .</p><p>Ahora con la llegada de este hook, se pueden acceder a los eventos m\xE1s usados desde una \xFAnica funci\xF3n, tales son <code>componentDidMount</code>, <code>componentDidUpdate</code> y <code>componentWillUnmount</code></p><h2 id="-c-mo-se-usa-el-useeffect"><strong>\xBFC\xF3mo se usa el useEffect?</strong></h2><p>Como bien les cont\xE9, el useEffect unifica 3 m\xE9todos asociados al ciclo de vida de nuestro componente, as\xED que \xBFC\xF3mo diferenciamos cada uno de estos m\xE9todos?</p><p>Este hook al igual que todos son funciones, y en este caso recibe dos par\xE1metros, el primero corresponde a un callback o funci\xF3n y el segundo un arreglo de dependencias.</p><p>El callback no recibe ning\xFAn par\xE1metro solamente nos sirve para ejecutar c\xF3digo en el momento de que se produzca el efecto deseado.</p><p>Por otro lado, el segundo par\xE1metro es opcional y dependiendo de su valor el efecto se ejecutar\xE1.</p><pre><code class="language-javascript">import React, { useEffect } from 'react'

useEffect(() =&gt; { /* Your code here... */ });</code></pre><h2 id="momentos-de-ejecuci-n-seg-n-el-valor-del-segundo-par-metro-del-useeffect"><strong>Momentos de ejecuci\xF3n seg\xFAn el valor del segundo par\xE1metro del useEffect</strong></h2><p>Pasemos a descubrir los 3 posibles casos en los que se puede ejecutar este hook seg\xFAn el valor del segundo par\xE1metro. \u{1F913}</p><!--kg-card-begin: markdown--><ul>
<li>
<p><strong>Sin valor</strong>: cuando omitimos este par\xE1metro, el efecto se producir\xE1 en el primer renderizado y en cada uno de los subsecuentes (cuando se produce un cambio de estado o las props cambian). Podemos decir que en este caso est\xE1n combinados los m\xE9todos <code>componentDidMount</code> y <code>componentDidUpdate</code></p>
</li>
<li>
<p><strong>Arreglo vac\xEDo [ ]</strong>: cuando le pasamos este valor, el efecto se producir\xE1 <strong>\xFAnicamente</strong> en el primer renderizado y es equivalente al m\xE9todo <code>componentDidMount</code>. Y esto es debido a que el efecto se produce siempre y cuando el valor dentro del arreglo [ ] cambie, y como en este caso al no recibir nada, React ejecuta el efecto una \xFAnica vez.</p>
</li>
<li>
<p><strong>Arreglo con dependencias</strong>: los posibles valores de este arreglo pueden ser variables asociadas a un <strong>estado</strong> o <strong>props</strong> del componente, seg\xFAn sea el caso el hook se ejecutar\xE1 cada vez que su(s) dependencia(s) cambie(n).</p>
<p>Podemos pasar la cantidad de dependencias que queramos, pero realmente no es muy recomendado (m\xE1s que nada por razones de performance) y se opta por usar varios <code>useEffect</code> con diferentes dependencias.</p>
<p>Este caso es similar al m\xE9todo <code>componentDidUpdate</code>, a excepci\xF3n de que s\xF3lo se ejecutar\xE1 cuando las dependendencias cambien y no ante cada cambio o reenderizado como si ocurre con este m\xE9todo de las componentes de clases.</p>
</li>
</ul>
<!--kg-card-end: markdown--><p>Como te habr\xE1s dado cuenta no mencion\xE9 el m\xE9todo <code>componentWillUnmount</code>, y es porque no solamente tiene que ver con el valor del segundo par\xE1metro del <code>useEffect</code>, si no que hace falta unos peque\xF1os detalles que ya te contar\xE9 \u{1F608}</p><!--kg-card-begin: markdown--><p>A continuaci\xF3n te dejo las comparaciones de <code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code> con el <code>useEffect</code></p>
<!--kg-card-end: markdown--><h2 id="ciclos-de-vida-en-componentes-de-tipo-clase-vs-componentes-de-tipo-funci-n"><strong>Ciclos de vida en componentes de tipo clase vs componentes de tipo funci\xF3n</strong></h2><p>Si llevas mucho tiempo trabajando con los componentes de clases, te servir\xE1 mucho esta informaci\xF3n para saber las equivalencias de los m\xE9todos antes mencionados y su uso a trav\xE9s del useEffect.</p><h3 id="componentdidmount">componentDidMount</h3><p>Si nos vamos a la traducci\xF3n literal del nombre de este m\xE9todo al espa\xF1ol es "El componente se mont\xF3", y s\xED, este es el preciso momento en el que se ejecuta este m\xE9todo, justo y \xFAnicamente luego de hacer el <strong>primer renderizado </strong>del componente.</p><p>Podemos decir que hace la misma funci\xF3n que el m\xE9todo <code>OnInit</code> de Angular \u{1F60E}</p><p>Bien, pasemos a como se accede a este momento del ciclo de vida con componentes de clases y como lo har\xEDamos con los componentes funcionales</p><figure class="kg-card kg-code-card"><pre><code class="language-jsx">import React from "react";
class App extends React.Component {
  state = { name: "Diego" };

  componentDidMount() { // M\xE9todo ejecutado en el primer renderizado
    console.log("Se inicializ\xF3 el componente por primera vez");
  }

  render() {
    return &lt;h1&gt;Mi nombre es {this.state.name}&lt;/h1&gt;;
  }
}
export default App;
</code></pre><figcaption>Accediendo al momento del primer renderizado con componentes de clase</figcaption></figure><figure class="kg-card kg-code-card"><pre><code class="language-jsx">import React, { useEffect, useState } from "react";

const App = () =&gt; {
  const [state] = useState({ name: "Diego" });
    
  useEffect(() =&gt; {
    console.log("Se inicializ\xF3 el componente por primera vez");
  }, []); // M\xE9todo ejecutado en el primer renderizado
    
  return &lt;h1&gt; Hello {state.mensaje}&lt;/h1&gt;;
};

export default App;
</code></pre><figcaption>Accediendo al momento del primer renderizado con componentes funcionales</figcaption></figure><p>Como ver\xE1n el segundo par\xE1metro de este hook juega un papel muy importante para decidir cuando se ejecutar\xE1 el efecto, tal cual como mencion\xE9 anteriormente en el caso de querer ejecutar c\xF3digo al momento del primer renderizado, basta con pasarle un array vac\xEDo al segundo par\xE1metro \u{1F601}</p><blockquote>Enti\xE9ndase <strong>primer renderizado </strong>como el momento justo cuando React monta un componente en el DOM, es decir, cuando nosotros veamos nuestro componente en el DOM, posteriormente se ejecutar\xE1 por <strong>\xFAnica vez</strong> el efecto.</blockquote><h3 id="componentdidupdate">componentDidUpdate</h3><p>Su traducci\xF3n literal al espa\xF1ol es "el componente se actualiz\xF3", creo que el nombre se explica por si solo.</p><!--kg-card-begin: markdown--><p>Este m\xE9todo se ejecutar\xE1 cada vez que se produzca un cambio de estado o de props e independientemente de a quien pertenezca el cambio, es decir, no importa si cambio una <code>prop</code> o un <code>state</code> sea cual sea el caso se ejecutar\xE1 este m\xE9todo.</p>
<p>Si nos vamos a Angular este m\xE9todo es similar a <code>OnChanges</code> \u{1F60E}</p>
<p>Compar\xE9moslo con el <code>useEffect</code></p>
<!--kg-card-end: markdown--><p>Supongamos que queremos registrar la cantidad de veces que ha sido presionado un bot\xF3n ante cada cambio:</p><figure class="kg-card kg-code-card"><pre><code class="language-jsx">import React from "react";

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      clicks: 0
    };
  }

  componentDidUpdate() {
    // Ante cada cambio mostramos por consola la cantidad de veces que ha sido presionado el boton
    console.log(
      "Cantidad de veces que ha sido presionado el bot\xF3n:",
      this.state.clicks
    );
  }

  render() {
    return (
      &lt;div&gt;
        &lt;p&gt;Este bot\xF3n ha sido presionado {this.state.clicks} vece(s)&lt;/p&gt;
        &lt;button
          onClick={() =&gt; this.setState({ clicks: this.state.clicks + 1 })}
        &gt;
          Presioname
        &lt;/button&gt;
      &lt;/div&gt;
    );
  }
}

export default Counter;</code></pre><figcaption>Usando los eventos de las clases en React</figcaption></figure><figure class="kg-card kg-code-card"><pre><code class="language-jsx">import React, { useState, useEffect } from "react";

const Counter = () =&gt; {
  const [state, setState] = useState({ clicks: 0 });

  useEffect(() =&gt; {
    console.log(
      "Cantidad de veces que ha sido presionado el bot\xF3n:",
      state.clicks
    );
  });

  return (
    &lt;div&gt;
      &lt;p&gt;Este bot\xF3n ha sido presionado {state.clicks} vece(s)&lt;/p&gt;
      &lt;button onClick={() =&gt; setState({ clicks: state.clicks + 1 })}&gt;
        Presioname
      &lt;/button&gt;
    &lt;/div&gt;
  );
};

export default Counter;</code></pre><figcaption>Usando los hooks useState y useEffect</figcaption></figure><p>A nivel funcional encontramos una peque\xF1a diferencia, como les coment\xE9 anteriormente cuando el useEffect no tiene dependencia se est\xE1n ejecutando los m\xE9todos <code>componentDidMount</code> y <code>componentDidUpdate</code>, por lo cual, en el ejemplo del useEffect tendremos que en el primer renderizado veremos el log en la consola.</p><p>Pero este es un detalle menor, lo realmente interesante es cuando queramos registrar por consola solamente cuando cambie la cantidad de clicks, ya que el c\xF3digo que tenemos ahora provocar\xE1 que se registre ese evento sin importar en donde se produjo el cambio, sean props o estados.</p><p>Veamos un ejemplo de como solucionar esto, agregando un bot\xF3n "B" y registrando \xFAnicamente en consola cuando el bot\xF3n "A" sea presionado. \u{1F64A}</p><pre><code class="language-jsx">class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = { clicksA: 0, clicksB: 0 };
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.clicksA !== this.state.clicksA) {
    console.log(
      "Cantidad de veces que ha sido presionado el bot\xF3n A:",
      this.state.clicksA
    );
    }
  }

  render() {
    return (
    &lt;div&gt;
      &lt;button
        onClick={() =&gt; this.setState({ ...this.state, clicksA: this.state.clicksA + 1 })}
      &gt;
        Boton A
      &lt;/button&gt;
      &lt;button
        onClick={() =&gt; this.setState({ ...this.state, clicksB: this.state.clicksB + 1 })}
      &gt;
        Boton B
      &lt;/button&gt;
    &lt;/div&gt;
    );
  }
}

export default Counter;</code></pre><pre><code class="language-jsx">const Counter = () =&gt; {
  const [state, setState] = useState({ clicksA: 0, clicksB: 0 });

  useEffect(() =&gt; {
    console.log(
      "Cantidad de veces que ha sido presionado el bot\xF3n A:",
      state.clicksA
    );
  }, [state.clicksA]);

  return (
    &lt;div&gt;
      &lt;button
        onClick={() =&gt; setState({ ...state, clicksA: state.clicksA + 1 })}
      &gt;
        Boton A
      &lt;/button&gt;
      &lt;button
        onClick={() =&gt; setState({ ...state, clicksB: state.clicksB + 1 })}
      &gt;
        Boton B
      &lt;/button&gt;
    &lt;/div&gt;
  );
};

export default Counter;</code></pre><!--kg-card-begin: markdown--><p>Como podr\xE1n observar en las componentes de clases tenemos que hacer una diferenciaci\xF3n explicita para decidir cuando registrar en consola las veces que el bot\xF3n A ha sido presionado a diferencia del useEffect que solo basta con pasarle como dependencia el <code>state.clicksA</code>.</p>
<p>Otra diferencia que existe, es que el <code>useEffect</code> lo podemos usar cuantas veces querramos y el <code>componentDidUpdate</code> solo una vez y todos los cambios pasaran por ese m\xE9todo.</p>
<!--kg-card-end: markdown--><p>Si a\xFAn llegando hasta ac\xE1 te quedan dudas sobre el funcionamiento y las diferencias de este evento, puedes hac\xE9rmelo saber en los comentarios \u{1F60A}</p><h3 id="componentwillunmount">componentWillUnmount</h3><p>Bien hasta ahora no hemos explicado la equivalencia de este m\xE9todo con este hook, antes de explicarlo vayamos a la traducci\xF3n literal al espa\xF1ol para saber cuando se ejecuta este evento \u{1F601}, tenemos entonces "El componente se desmontar\xE1", esto quiere decir que el m\xE9todo se ejecutar\xE1 justo antes de desmontarse del DOM.</p><p>La equivalencia en Angular ser\xEDa <code>OnDestroy</code> \u{1F60E}</p><!--kg-card-begin: markdown--><p>Uno de los casos m\xE1s \xFAtiles por la que solemos usar este evento, es para cancelar alguna suscripci\xF3n, para ello supongamos que tenemos en nuestro componente un <code>setInterval</code> que hace &quot;algo&quot; y queremos limpiarlo antes de que nuestro componente se desmonte.</p>
<!--kg-card-end: markdown--><pre><code class="language-jsx">import React from "react";

class Interval extends React.Component {
  constructor(props) {
    super(props);
    this.interval;
  }

  componentDidMount() { // Inicializamos el interval al montarse el componente
    this.interval = setInterval(() =&gt; console.log("Algo estoy haciendo"), 1000);
  }

  componentWillUnmount() { //Eliminamos el interval justo antes de desmontarse el componente
    clearInterval(this.interval);
  }

  render() {
    return &lt;p&gt;Componente Interval&lt;/p&gt;;
  }
}

export default Interval;
</code></pre><pre><code class="language-jsx">import React, { useEffect } from "react";

const Interval = () =&gt; {
  useEffect(() =&gt; {
    const interval = setInterval( () =&gt; console.log("Algo estoy haciendo"), 1000); // Inicializamos el interval al montarse el componente
    return () =&gt; clearInterval(interval); //Eliminamos el interval justo antes de desmontarse el componente
  }, []);

  return &lt;p&gt;Componente Interval&lt;/p&gt;;
};

export default Interval;</code></pre><!--kg-card-begin: markdown--><p>Como podr\xE1n observar dentro del callback del <code>useEffect</code>, estamos retornando adem\xE1s otra funci\xF3n, esta funci\xF3n nos permite ejecutar c\xF3digo justo antes de que el componente se desmonte.</p>
<!--kg-card-end: markdown--><blockquote>Para acceder al m\xE9todo <strong>componentWillUnmount </strong>desde el <strong>useEffect, </strong>adem\xE1s de retornar una funci\xF3n, la dependencia debe ser un arreglo vac\xEDo [ ].</blockquote><p>Es de buena pr\xE1ctica, eliminar cualquier tipo de evento asincr\xF3nico antes de desmontar el componente a fin de mejorar el performance y evitar cualquier problema de volcado de memoria y bugs.</p><h2 id="conclusiones"><strong>Conclusiones</strong></h2><p>Bien en resumen, el useEffect es una nueva manera de acceder a los ciclos de vidas de nuestros componentes funcionales e incluso nos permite usar menos l\xEDneas de c\xF3digo \u{1F913}. \xBFTe gust\xF3 este post? \xBFAprendiste algo nuevo? \xBFTienes alguna duda? \xBFQuieres que explique algo en particular? H\xE1zmelo saber en la secci\xF3n de comentarios y recuerda seguirme en mis redes sociales \u{1F622} </p><p>Gracias por leer \u{1F61A}</p>`,comment_id:"5f98b578e67152001e735162",feature_image:"https://ghost.dartiles.dev/content/images/2020/10/useEffect.jpg",featured:!1,visibility:"public",send_email_when_published:!1,created_at:"2020-10-27T21:04:08.000-03:00",updated_at:"2020-10-31T14:08:49.000-03:00",published_at:"2020-10-31T13:00:00.000-03:00",custom_excerpt:null,codeinjection_head:null,codeinjection_foot:null,custom_template:null,canonical_url:null,tags:[{id:"5f8ced9d62d1f8001edf372d",name:"React",slug:"react",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/react/"}],authors:[{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"}],primary_author:{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"},primary_tag:{id:"5f8ced9d62d1f8001edf372d",name:"React",slug:"react",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/react/"},url:"https://ghost.dartiles.dev/useeffect-react-hooks-ciclos-de-vida/",excerpt:`Adem\xE1s del useState, el hook useEffect es uno de los m\xE1s usados en React.
Anteriormente ya explicamos como funciona el useState y como usarlo con arrays
y
objetos
[https://dartiles.dev/blog/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos]
, y ahora es el momento de este hook \u{1F917}

Ciclos de vidas en componentes funcionales
Antes en React (versiones inferiores a la 16.8) dispon\xEDamos de varias funciones
heredadas de la clase Component, que nos permit\xEDan acceder a diferentes moment`,reading_time:7,access:!0,og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:"Descubre como acceder a los ciclos de vida de los componentes funcionales, como usar el hook useEffect de React y su equivalencia a los componentes de clases \u{1F496}",email_subject:null,createdAt:"2020-10-27T21:04:08.000-03:00",desc:`Adem\xE1s del useState, el hook useEffect es uno de los m\xE1s usados en React.
Anteriormente ya explicamos como funciona el useState y como usarlo con arrays
y
objetos
[https://dartiles.dev/blog/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos]
, y ahora es el momento de este hook \u{1F917}

Ciclos de vidas en componentes funcionales
Antes en React (versiones inferiores a la 16.8) dispon\xEDamos de varias funciones
heredadas de la clase Component, que nos permit\xEDan acceder a diferentes moment`,image:"media/blog/useeffect-react-hooks-ciclos-de-vida/useeffect-react-hooks-ciclos-de-vida.png"},{id:"5f8cc893966885001e79d750",uuid:"ed8284a3-8b5e-4a44-aa16-cfff0adba9b8",title:"Como funciona el hook useState y como usarlos con Arrays y Objetos",slug:"como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos",html:`<p>En este art\xEDculo te voy a explicar que es y para que sirve el hook <strong>useState </strong>de React, adem\xE1s de los distintos usos que le podemos dar.</p><h2 id="-qu-son-los-hooks-de-react"><strong>\xBFQu\xE9 son los hooks de React?</strong></h2><p>Los hooks son funciones que se "atan" o "enganchan" a los componente de tipo funci\xF3n (componentes funcionales) y nos aportan muchas de las caracter\xEDsticas que ten\xEDamos en las componentes de tipo clase. </p><p>Estas funciones se introdujeron en la versi\xF3n <strong>16.8</strong> de React, por ende, antes de utilizarlos aseg\xFArate de tener esta versi\xF3n o posterior.</p><h2 id="para-que-sirve-el-hook-usestate"><strong>Para que sirve el hook useState</strong></h2><p>El hook useState sirve para almacenar un estado a trav\xE9s de una variable en nuestro componente. </p><h2 id="-c-mo-se-usa-el-usestate"><strong>\xBFC\xF3mo se usa el useState?</strong></h2><p>Como les hab\xEDa comentado, los hooks son funciones los cuales reciben un par\xE1metro que representa el valor por defecto que tendr\xE1 nuestro estado y retorna un arreglo de dos elementos, el primer elemento contiene el estado actual y el segundo una funci\xF3n para modificar dicho estado.</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">import React, { useState } from "react"; // Importamos useState desde 'react'

const App = () =&gt; {
  const state = useState("default value"); // Valor inicial del estado
  const stateValue = state[0]; // El primer elemento es el valor del estado
  const setStateValue = state[1]; // El segundo elemento es la funci\xF3n que utilizaremos para actualizar el estado

  // A continuaci\xF3n mostramos el valor del estado y lo cambiamos a 'Another value' al hacer clic en el elemento div
  return &lt;div onClick={() =&gt; setStateValue('Another value')}&gt;{stateValue}&lt;/div&gt;;
};

export default App;
</code></pre><figcaption>Manera larga de declarar estos estados</figcaption></figure><p>Si bien es cierto, no es la mejor forma de declarar el estado y su actualizador en variables separadas, si que es m\xE1s f\xE1cil de entender \u{1F468}\u200D\u{1F4BB}</p><p>Pero la forma que se suele utilizar y la m\xE1s corta para declararlas, es la siguiente:</p><pre><code class="language-javascript">const [stateValue, setStateValue] = useState("default value");</code></pre><p>Con la l\xEDnea anterior obtenemos el mismo resultado, pero utilizando menos l\xEDneas de c\xF3digo. Si acostumbras a trabajar con el menor c\xF3digo posible esta forma te gustar\xE1 \u{1F601}</p><p>En este caso yo inicialice el estado con un <em>string </em>pero podemos usar cualquier tipo de valor como por ejemplo:</p><ul><li>Arreglos</li><li>Objetos</li><li>Booleanos</li><li>Strings</li></ul><p>Y en este art\xEDculo te mostrar\xE9 ejemplos con Arreglos y Objetos \u{1F61C}</p><h2 id="usar-arreglos-o-arrays-en-usestate"><strong>Usar Arreglos o Arrays en useState</strong></h2><p>Aqu\xED hay una particularidad con este tipo de datos y el hook useState que ya les ir\xE9 contando.</p><p>Primero declaramos nuestros useState con Arreglos, en este caso yo usar\xE9 el ejemplo de un array que contenga nombre de frutas:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const [fruits, setFruits] = useState(['Banana', 'Fresa', 'Durazno']);</code></pre><figcaption>Declarando el estado</figcaption></figure><p>Si quisi\xE9ramos agregar el nombre de otra fruta a esta lista, seguramente est\xE9s pensando en usar el m\xE9todo <strong>push(), </strong>pero lamentablemente no nos servir\xE1 y antes de explicarte porque, te muestro como har\xEDamos ese cambio de estado:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">  fruits.push('Manzana') // Opci\xF3n 1
  setFruits(fruits.push('Manzana')) // Opci\xF3n 2</code></pre><figcaption>Intentando agregar una fruta a nuestra lista usando el m\xE9todo push del array</figcaption></figure><p>Si intentaste esto alguna vez seguramente te diste cuenta que no funcion\xF3 del todo bien, y esto es debido a las siguientes razones: </p><ul><li>La variable <strong>fruits</strong> es inmutable (no se puede modificar), por eso tiene su funci\xF3n "actualizadora" (Opci\xF3n 1)</li><li>Utilizar el m\xE9todo <strong>push </strong>dentro de la funci\xF3n <strong>setFruits </strong>tampoco funciona, porque si repasamos la teor\xEDa nos daremos cuenta que este m\xE9todo a pesar de agregar un nuevo elemento a un array lo que retorna es el <strong>length </strong>del array resultante y esto es lo que estar\xEDa recibiendo <strong>setFruits, </strong>que en nuestro caso es 4, es por eso que el nuevo valor de nuestro estado es 4 (Opci\xF3n 2).</li></ul><h3 id="formas-de-actualizar-un-array-en-usestate">Formas de actualizar un array en useState</h3><p>Antes de explicar cual es la manera correcta de modificar el valor de este elemento, tenemos que saber que la funci\xF3n actualizadora (setFruits en nuestro caso) puede recibir una funci\xF3n que tiene como \xFAnico par\xE1metro el valor actual del estado y retornar el nuevo valor del mismo. Seguramente al momento de leer esto se te venga a la cabeza como actualizar nuestro estado \u{1F600}, veamos si coincidimos:</p><p>Usando el m\xE9todo <strong>concat(), </strong>podemos actualizar nuestro estado seg\xFAn las dos formas aprendidas: usando la funci\xF3n interna de la funci\xF3n actualizadora o pasando directamente el valor nuevo a la funci\xF3n actualizadora.<br><br>Dejo a continuaci\xF3n un ejemplo con ambas opciones:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">setFruits(currentFruits =&gt; currentFruits.concat('Manzana')) // Opci\xF3n 1
setFruits(fruits.concat('Manzana')) // Opci\xF3n 2

// Ambas opciones son validas</code></pre><figcaption>Actualizando nuestra lista de fruta con el m\xE9todo concat()</figcaption></figure><p>La funci\xF3n interna de <strong>setFruits </strong>puede ser \xFAtil cuando queramos desarrollar cierta l\xF3gica antes de definir el nuevo valor, pero particularmente no lo suelo hacer, primero preparo el valor nuevo en una variable y se lo paso a <strong>setFruits </strong>para actualizar el estado.</p><blockquote>React no actualiza el estado de manera instant\xE1nea, sino que agrega el pedido de actualizaci\xF3n a la cola para el pr\xF3ximo renderizado del componente, y la siguiente que vez que pase por nuestro <strong>useState </strong>omitir\xE1 el valor por defecto que le asignamos y en su lugar usar\xE1 el valor que estaba en la cola.</blockquote><p>Ya que sabemos la manera correcta de actualizar el estado, hay otra forma de hacerlo mucho m\xE1s amigable y corta, usando <strong>spread operator</strong></p><pre><code class="language-javascript">setFruits([...fruits, 'Manzana'])</code></pre><h2 id="usar-objetos-en-usestate"><strong>Usar objetos en useState</strong></h2><p>Con lo aprendido anteriormente, usemos estos mismos conocimiento con este tipo de dato, primero veamos cual es nuestro candidato para esta prueba \u{1F604}</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">  const [person, setPerson] = useState(
    {
      name: 'Diego',
      age: 22,
    }
  );</code></pre><figcaption>Definiendo el estado</figcaption></figure><p>Como bien lo dice el t\xEDtulo ahora probaremos con objetos, en este caso son los datos de una persona que se llama "Diego" como yo y casualmente tiene mi misma edad \u{1F914} jaja. </p><p>\xA1Concentr\xE9monos! Supongamos que me quiero aumentar la edad a 30, ya sabemos que para editar la propiedad de un objeto hacemos lo siguiente:</p><pre><code class="language-javascript">person.age = 30</code></pre><p>Por ende podemos pensar que para actualizar el valor de nuestro estado har\xEDamos esto</p><pre><code class="language-javascript">person.age = 30
setPerson(person)</code></pre><p>pero no nos funciona porque para React el estado nunca cambi\xF3 por ende no vio la necesidad de renderizar el componente nuevamente para reflejar este "cambio".</p><blockquote>Uno de los requisitos para que <strong>React </strong>refleje un nuevo estado, es que el mismo cambie y en el caso de los objetos utiliza <strong>Object.is </strong>para hacer esta comprobaci\xF3n</blockquote><p>Cuando tengamos que actualizar una propiedad de un objeto debemos pasarle uno nuevo junto a la propiedad modificada, para esto podemos usar el <strong>spread operator, </strong>te dejo un ejemplo \u{1F606}</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">import React, { useState } from "react";

const Person = () =&gt; {
  const [person, setPerson] = useState(
    {
      name: 'Diego',
      age: 22,
    }
  );
  const changeAge = () =&gt; {
    setPerson({...person, age: 30})
  }


  return &lt;div onClick={() =&gt; changeAge()}&gt;Edad de la persona {person.age}&lt;/div&gt;;
};

export default Person;
</code></pre><figcaption>Actualizamos mi edad cuando demos clic a el elemento div</figcaption></figure><h2 id="agradecimientos"><strong>Agradecimientos</strong></h2><p>Mil gracias si llegaste hasta aqu\xED, si te sirvi\xF3 de algo este art\xEDculo d\xE9jamelo saber en los comentarios y comp\xE1rtelo con tus amigos \u{1F970}</p><p>Si te quedaron dudas o deseas que explique alg\xFAn otro hook o cosa del mundo del frontend, av\xEDsame desde los comentarios \u{1F929}</p>`,comment_id:"5f8cc893966885001e79d750",feature_image:"https://ghost.dartiles.dev/content/images/2020/10/react-logo-2.png",featured:!1,visibility:"public",send_email_when_published:!1,created_at:"2020-10-18T19:58:27.000-03:00",updated_at:"2020-10-24T14:24:25.000-03:00",published_at:"2020-10-18T21:43:25.000-03:00",custom_excerpt:"Descubre a pronfudidad como se usa el hook useState, adem\xE1s te muestro casos particulares que posiblemente te hayan explotado la cabeza \u{1F92F}",codeinjection_head:null,codeinjection_foot:null,custom_template:null,canonical_url:null,tags:[{id:"5f8ced9d62d1f8001edf372d",name:"React",slug:"react",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/react/"},{id:"5f669a13e491f8001e550caa",name:"Javascript",slug:"javascript",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/javascript/"}],authors:[{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"}],primary_author:{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"},primary_tag:{id:"5f8ced9d62d1f8001edf372d",name:"React",slug:"react",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/react/"},url:"https://ghost.dartiles.dev/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos/",excerpt:"Descubre a pronfudidad como se usa el hook useState, adem\xE1s te muestro casos particulares que posiblemente te hayan explotado la cabeza \u{1F92F}",reading_time:4,access:!0,og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,email_subject:null,createdAt:"2020-10-18T19:58:27.000-03:00",desc:"Descubre a pronfudidad como se usa el hook useState, adem\xE1s te muestro casos particulares que posiblemente te hayan explotado la cabeza \u{1F92F}",image:"media/blog/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos/como-funciona-el-hook-usestate-y-como-usarlos-con-arrays-y-objetos.png"},{id:"5f669903e491f8001e550c82",uuid:"fd13b219-2a92-43d8-ae74-d0941a35121a",title:"Novedades de EcmaScript 2020 o ES11",slug:"novedades-de-ecmascript-2020-o-es11",html:`<p>En este art\xEDculo me gustar\xEDa explicar un poco, todas las novedades ya disponibles en JavaScript.</p><p>Pero antes de empezar quisiera explicar algunas cosas:</p><h2 id="-qu-es-ecmascript"><strong>\xBFQu\xE9 es Ecmascript?</strong></h2><p>Ecmascript es el est\xE1ndar definido en ECMA-262 para los lenguajes de <em>scripting de prop\xF3sito general,</em> entre ellos se encuentra nuestro lenguaje favorito <em>JavaScript.</em></p><p>Esto es bastante confuso incluso hasta para mi, la forma m\xE1s f\xE1cil que se me hace de entender esto, es ver a EcmaScript como si fuese la RAE (quien es la que establece las normativas para el idioma Espa\xF1ol) de JavaScript.</p><p>Bueno, a continuaci\xF3n en este art\xEDculo quisiera compartir, las nuevas caracter\xEDsticas presentadas en este est\xE1ndar.</p><p>Ahora si, \xBFQu\xE9 hay de nuevo en esta versi\xF3n?</p><h2 id="importaciones-din-micas-dynamic-imports-"><strong>Importaciones Din\xE1micas (Dynamic Imports)</strong></h2><p>Algo que pasaba mucho en JavaScript, es que no pod\xEDamos importar m\xF3dulos seg\xFAn sean necesarios.</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">import * as myModule from './someModule.js/'
// o 
import { myModule } from './someModule.js/'

const button = document.getElementById('button')

button.addEventListener('click', () =&gt; myModule.doSomething())</code></pre><figcaption>Importaci\xF3n de M\xF3dulos antes de ES11</figcaption></figure><p>En este ejemplo estar\xEDamos utilizando el m\xE9todo <em>doSomething() </em>de <em>myModule, </em>en el evento click de alg\xFAn bot\xF3n. Independientemente de cuando ocurra el evento click, aqu\xED hay varios temas que debemos tener en cuenta:</p><ul><li>La importaci\xF3n de nuestro modulo se produce durante el tiempo de carga del m\xF3dulo actual.</li><li>No hay forma de cambiar la \u201Cdirecci\xF3n\u201D u \u201Corigen\u201D de nuestro modulo, din\xE1micamente.</li><li>Muy probablemente nuestro m\xF3dulo quede sin usarse (aunque este ya haya sido cargado), si no se produce el click tan esperado.</li></ul><p>Todo esto afecta el rendimiento de la aplicaci\xF3n que estemos desarrollando.</p><p>Con los <em>imports din\xE1micos, </em>nos despedimos de estos problemas:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const customPath = someExpression ? './somePath' : './anotherPath'

const button = document.getElementById('button')

button.addEventListener('click', async () =&gt; {
    const myModule = await import(\`\${customPath}/myModule.js\`)
    myModule.doSomething()
})</code></pre><figcaption>Importaci\xF3n din\xE1mica de m\xF3dulos implementada en ES11</figcaption></figure><p><strong>Import</strong> recibe el path donde se encuentra nuestro m\xF3dulo y devuelve una promesa al terminar.</p><h2 id="n-meros-enteros-m-s-grandes-bigint-"><strong>N\xFAmeros Enteros m\xE1s \u201Cgrandes\u201D (BigInt)</strong></h2><p>Hasta ahora en JavaScript pod\xEDamos hacer c\xE1lculos matem\xE1ticos cuyos resultados no sean mayores a 2\u2075\xB3\u200A\u2014\u200A1, es decir, hasta <strong>Number.MAX_SAFE_INTEGER.</strong></p><p>Les muestro un ejemplo sencillo de que pasa cuando nos sobrepasamos de este valor.</p><pre><code class="language-javascript">Number.MAX_SAFE_INTEGER
// 9007199254740991
Number.MAX_SAFE_INTEGER + 1
// 9007199254740992
Number.MAX_SAFE_INTEGER + 2
// 9007199254740992
Number.MAX_SAFE_INTEGER + 3
// 9007199254740994</code></pre><p>Con este ejemplo sabemos que JavaScript, no es capaz de representar c\xE1lculos matem\xE1ticos que superen el valor de <strong>Number.MAX_SAFE_INTEGER.</strong></p><p>Para solventar este problema se ha a\xF1adido un nuevo tipo de dato num\xE9rico, llamado BigInt que como su nombre indica solo soporta n\xFAmeros enteros.</p><p>La forma de utilizar este tipo de dato, es igual que <strong>Number </strong>o con la terminaci\xF3n \u201Cn\u201D precedido del n\xFAmero.</p><pre><code class="language-javascript">BigInt(Number.MAX_SAFE_INTEGER)
// 9007199254740991n
BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)
// 9007199254740992n
BigInt(Number.MAX_SAFE_INTEGER) + BigInt(2)
// 9007199254740993n
BigInt(Number.MAX_SAFE_INTEGER) + BigInt(3)
// 9007199254740994n

BigInt(Number.MAX_SAFE_INTEGER) + 3n
// 9007199254740994n
9007199254740991n + 3n
// 90071992547409914n</code></pre><blockquote>BigInt y Number, no son compatibles entre s\xED por lo que no podemos hacer operaciones entre ambos.</blockquote><h2 id="promise-allsettled-"><strong>Promise.allSettled()</strong></h2><p>Este m\xE9todo para las promesas viene a\xF1adir una caracter\xEDstica que le faltaba al <strong>Promise.all()</strong>, el cual era resolver todas las promesas que le pas\xE1bamos independientemente de que alguna sea rechazada.</p><p>Recordemos <strong>Promise.all() </strong>lo que hac\xEDa es devolver un array con las respuestas de todas nuestras promesas SIEMPRE Y CUANDO NO HAYA SIDO RECHAZADA NINGUNA, en tal caso devolver\xEDa el error de la promesa rechazada y perder\xEDamos el valor de las promesas que si fueron exitosas.</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">var promise1 = Promise.resolve(3)
var promise2 = new Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject('Error from PromiseAll'), 1000))
var promises = [promise1, promise2]

Promise.all(promises)
    .then(results =&gt; console.log(results))

// Output: Uncaught (in promise) Error from PromiseAll</code></pre><figcaption>Respuesta del m\xE9todo all, cuando una promesa es rechazada o tuvo un error</figcaption></figure><figure class="kg-card kg-code-card"><pre><code class="language-javascript">var promise1 = Promise.resolve(3)
var promise2 = new Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject('Error from PromiseAllSettled'), 1000))
var promises = [promise1, promise2]

Promise.allSettled(promises)
    .then(results =&gt; console.log(results))

/* Output:

[
   {
      status: 'fulfilled',
      value: 3
   },
   {
      status: 'rejected',
      reason: 'Error from PromiseAllSettled'
   }
]

*/</code></pre><figcaption>Respuesta del m\xE9todo allSettled, cuando una promesa es rechazada o tuvo un error</figcaption></figure><p>A diferencia de de <strong>Promise.all(), Promise.allSettled() </strong>devuelve un array de objetos.</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">var promise1 = Promise.resolve(3)
var promise2 = new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve('Promesa Exitosa'), 1000))
var promises = [promise1, promise2]

Promise.all(promises)
    .then(results =&gt; console.log(results))

// Output: [3, 'Promesa Exitosa']</code></pre><figcaption>Respuesta del m\xE9todo all, cuando todas las promesas fueron exitosas</figcaption></figure><figure class="kg-card kg-code-card"><pre><code class="language-javascript">var promise1 = Promise.resolve(3)
var promise2 = new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve('Promesa Exitosa'), 1000))
var promises = [promise1, promise2]

Promise.allSettled(promises)
    .then(results =&gt; console.log(results))

/* Output:

[
   {
      status: fulfilled,
      value: 3
   },
   {
      status: 'fulfilled',
      reason: 'Promesa Exitosa'
   }
]

*/</code></pre><figcaption>Respuesta del m\xE9todo allSettled, cuando todas las promesas fueron exitosas</figcaption></figure><p>Entonces en resumen, <strong>Promise.allSettled() </strong>devuelve un array de objetos con los estados de todas las promesas (resueltas y rechazadas) y sus respectivos valores o errores (seg\xFAn sea el caso).</p><h2 id="-operador-de-fusi-n-nulo-nullish-coalescing-operator-"><strong>\u201COperador de fusi\xF3n nulo\u201D (Nullish Coalescing Operator)</strong></h2><p>En realidad no supe como traducir esto de una forma comprensible \u{1F622}</p><p>Este operador se denota con dos s\xEDmbolos de interrogaci\xF3n cerrados <strong>??, </strong>su funcionamiento es similar al operador OR, salvo algunas cositas \u{1F601}</p><p>Me gustar\xEDa explicar estas cositas con ejemplos:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const video = {
   title: 'My awasome video',
   views: 0
}

const views = video.views || 'Views not available yet'
// views: 'Views not available yet'</code></pre><figcaption>Evaluando la condici\xF3n con el operador OR (||)</figcaption></figure><p>Si tenemos esta expresi\xF3n, \xBFQu\xE9 valor tendr\xE1 nuestra constante <strong>views</strong>?</p><p>Ya sabemos que nuestro video tiene 0 visitas \u{1F625}, pero queremos mostrar este valor en alg\xFAn lado de la aplicaci\xF3n utilizando la constante <strong>views, </strong>lo que estaremos haciendo es mostrar \u2018Views not available yet\u2019 y no 0 precisamente porque el operador OR interpreta el cero como falso e inmediatamente se le asigna el valor por defecto.</p><p>Pero esto no est\xE1 bueno, porque en realidad las views si las tenemos, en este caso es 0, de ser <em>null</em> o <em>undefined </em>si ser\xEDa correcto asignar el valor por defecto.</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const video = {
   title: 'My awasome video',
   views: 0
}

const views = video.views ?? 'Views not available yet'
// views: 0</code></pre><figcaption>Evaluando la condici\xF3n con el operador de fusi\xF3n nulo (??)</figcaption></figure><p>En resumen (||) es similar a (??), con la \xFAnica excepci\xF3n de que \xFAltimo solo contempla valores <em>null</em> o <em>undefined</em> para evaluar la siguiente expresi\xF3n.</p><h2 id="encadenamiento-opcional-optional-chaining-"><strong>Encadenamiento Opcional (Optional Chaining)</strong></h2><p>Utilizando en el mismo ejemplo del video, que pasa si queremos obtener el nombre del autor a partir del siguiente c\xF3digo:</p><pre><code class="language-javascript">const video = {
   title: 'My awasome video',
   views: 0,
   author: {
      name: 'Diego'
   }
}

const authorName = video.author.name || 'Unknown'
// authorName: 'Diego'

const video2 = {
   title: 'My awasome video',
   views: 0
}

const authorName2 = video2.author.name || 'Unknown'
// Output: Uncaught TypeError: Cannot read property 'name' of undefined</code></pre><p>Como ver\xE1n en <strong>authorName </strong>logramos obtener el nombre del autor del video sin problemas, pero en <strong>authorName2 </strong>obtenemos un error, esto se debe a que la propiedad <strong>author</strong> no existe en el objeto <strong>video2, </strong>debemos verificar si existe antes de intentar recuperarla, una de las formas que ten\xEDamos de hacer esto eran las siguientes:</p><figure class="kg-card kg-code-card"><pre><code class="language-javascript">const video = {
   title: 'My awesome video',
   views: 0
}

const authorName = (video.author || {}).name || 'Unknown'
// authorName: 'Unknown'

// OR

const authorName = video.author &amp;&amp; video.author.name || 'Unknown'
// authorName: 'Unknown'</code></pre><figcaption>Varias alternativas de acceder de manera segura al nombre del autor</figcaption></figure><p>Estas son solo alguna de las formas que tenemos para acceder a propiedades de objeto de manera segura, y las expresiones pueden llegar a ser mucho m\xE1s extensas si tenemos muchos subniveles.</p><p>Para solucionar esto llegaron los \u201CEncadenamientos Opcionales\u201D denotados con el s\xEDmbolo de interrogaci\xF3n cerrado (?) y ubicados antes de cada (.), usando este nuevo operador podemos simplificar nuestra expresi\xF3n sin obtener errores, el ejemplo anterior quedar\xEDa de la siguiente forma:</p><pre><code class="language-javascript">const video = {
   title: 'My awesome video',
   views: 0
}

const authorName = video.author?.name || 'Unknown'
// authorName: 'Unknown'</code></pre><p>Si alguna vez trabajaron con angular recordaran que esta caracter\xEDstica estaba soportaba en el template de los componentes, pero no en nuestros archivos con typescript.</p><h2 id="globalthis"><strong>GlobalThis</strong></h2><p>Como sabemos JavaScript es un lenguaje multiplaforma, es muy vers\xE1til y nos permite platorma. Uno de los inconvenientes que ten\xEDamos era poder acceder al objeto \u201Cglobal\u201D de nuestro entorno, y es que seg\xFAn en donde estemos ejecutando nuestro lenguaje la manera de acceder a este objeto global cambiaba.</p><p>Si quisi\xE9ramos obtener este objeto global independientemente del entorno, ten\xEDamos que realizar algo similar a esto:</p><pre><code class="language-javascript">const globalObject = () =&gt; {
    if (typeof self !== 'undefined') { return self; } // Web Workers
    if (typeof window !== 'undefined') { return self; } // Web Workers
    if (typeof global !== 'undefined') { return self; } // Web Workers
    throw new Error('can not find globalObject')
}</code></pre><p>Ahora con el <strong>globalThis </strong>no hace falta, ya que podemos acceder desde cualquier entorno/plataforma con solo llamarlo \u{1F600}</p><h2 id="conclusi-n"><strong>Conclusi\xF3n</strong></h2><p>Estas son las novedades de esta versi\xF3n m\xE1s destacadas de esta versi\xF3n, espero que las hayas entendido y a \xA1\xA1disfrutarlas!!.</p>`,comment_id:"5f669903e491f8001e550c82",feature_image:"https://ghost.dartiles.dev/content/images/2020/09/cover.png",featured:!1,visibility:"public",send_email_when_published:!1,created_at:"2020-09-19T20:49:23.000-03:00",updated_at:"2020-10-05T00:00:28.000-03:00",published_at:"2020-08-16T20:52:00.000-03:00",custom_excerpt:"Descubre las nuevas caracter\xEDsticas que trae esta nueva versi\xF3n de nuestro lenguaje favorito Javascript \u2764",codeinjection_head:null,codeinjection_foot:null,custom_template:null,canonical_url:null,tags:[{id:"5f669a13e491f8001e550caa",name:"Javascript",slug:"javascript",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/javascript/"}],authors:[{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"}],primary_author:{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"},primary_tag:{id:"5f669a13e491f8001e550caa",name:"Javascript",slug:"javascript",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/javascript/"},url:"https://ghost.dartiles.dev/novedades-de-ecmascript-2020-o-es11/",excerpt:"Descubre las nuevas caracter\xEDsticas que trae esta nueva versi\xF3n de nuestro lenguaje favorito Javascript \u2764",reading_time:5,access:!0,og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,email_subject:null,createdAt:"2020-09-19T20:49:23.000-03:00",desc:"Descubre las nuevas caracter\xEDsticas que trae esta nueva versi\xF3n de nuestro lenguaje favorito Javascript \u2764",image:"media/blog/novedades-de-ecmascript-2020-o-es11/novedades-de-ecmascript-2020-o-es11.png"},{id:"5f6624d6d10169001e91e82e",uuid:"bac02383-ee81-4c7c-910d-6cf3b9b90be0",title:"Los Frontends Developers",slug:"aprende-mas-sobre-los-frontend-developers",html:'<p>En este art\xEDculo quiero hablar sobre quienes son los Frontend Developers y cuales son sus funciones en el mundo de la programaci\xF3n.</p><h2 id="-qu-es-un-frontend-developer">\xBFQu\xE9 es un Frontend Developer?</h2><p>Un Frontend Developer es el responsable de desarrollar la interfaz visual y la interacci\xF3n de una p\xE1gina web con el usuario, todo esto conforma el c\xF3digo fuente que el navegador leer\xE1 para mostrar la aplicaci\xF3n, es decir, un Frontend Developer es el encargado de lo que el usuario ve.</p><p>Un sencillo ejemplo de esto es la plataforma en la que est\xE1s leyendo este art\xEDculo, LinkedIn. Como sabemos esta sufri\xF3 un cambio en su interfaz ya que no era tan agradable como la conocemos hoy en d\xEDa, para realizar este cambio el equipo de desarrollo necesita a los Web Designers, encargados de armar la presentaci\xF3n visual de la p\xE1gina web en un formato PSD (Adobe Photoshop) o cualquier otro, y por supuesto a los Web Developers quienes se encargar\xE1n de llevar a la web dicha "presentaci\xF3n visual".</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-linkedin.jpg" loading="lazy" class="kg-image" alt srcset="./media/blog/aprende-mas-sobre-los-frontend-developers/size-w600-2020-09-linkedin.jpg 600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1000-2020-09-linkedin.jpg 1000w, ./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-linkedin.jpg 1200w" sizes="(min-width: 720px) 720px"><figcaption>Comparaci\xF3n de las versiones de LinkedIn</figcaption></figure><h2 id="subconjuntos-dentro-del-frontend">Subconjuntos dentro del Frontend</h2><p>Dentro de este rol hay quienes prefieren enfocarse en el \xE1rea de dise\xF1o, mientras que otros en el \xE1rea de la funcionalidad. Es por eso, por lo que a mi juicio este rol se divide en dos subconjuntos:</p><h3 id="dise-ador-web-y-maquetador-web">Dise\xF1ador web y Maquetador web</h3><figure class="kg-card kg-image-card kg-card-hascaption"><img src="./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-frontend.jpg" loading="lazy" class="kg-image" alt srcset="./media/blog/aprende-mas-sobre-los-frontend-developers/size-w600-2020-09-frontend.jpg 600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1000-2020-09-frontend.jpg 1000w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1600-2020-09-frontend.jpg 1600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-frontend.jpg 1640w" sizes="(min-width: 720px) 720px"><figcaption>Una persona dise\xF1ando/maquetando</figcaption></figure><p>Un <strong>dise\xF1ador web,</strong> como su nombre lo indica es el responsable del dise\xF1o de la web. Su funci\xF3n es establecer los colores, el posicionamiento de los elementos, tales como el men\xFA, los botones, los banners, las im\xE1genes, entre otros.</p><p>Los dise\xF1adores web crean contenidos gr\xE1ficos ya sea im\xE1genes o videos, generalmente utilizando herramientas como Adobe Dreamweaver, Adobe Illustrator y/o Adobe Photoshop.</p><p>Una vez culminado el trabajo del dise\xF1ador, entra en juego el <strong>maquetador web</strong>. Esta persona es la responsable de traducir a c\xF3digo el dise\xF1o de la interfaz, manteniendo una similitud entre ellas. Generalmente esta persona debe trabajar en el Responsive Design, es decir, adaptar la interfaz de la web seg\xFAn el dispositivo que se est\xE9 utilizando para visitarla.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-responsive.jpg" loading="lazy" class="kg-image" alt srcset="./media/blog/aprende-mas-sobre-los-frontend-developers/size-w600-2020-09-responsive.jpg 600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1000-2020-09-responsive.jpg 1000w, ./media/blog/aprende-mas-sobre-los-frontend-developers/size-w1600-2020-09-responsive.jpg 1600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-responsive.jpg 2232w" sizes="(min-width: 720px) 720px"><figcaption>Responsive Design</figcaption></figure><p>Los maquetadores web para llevar acabo su trabajo deben tener conocimiento en HTML que sirve para dar la estructura de tu proyecto, CSS esencial para aplicar estilos y Javascript (si aplica) fundamental para implementar la interactividad.</p><h3 id="desarrollador-web">Desarrollador Web</h3><p>Un Desarrollador Web es el encargado de la parte funcional de una p\xE1gina web.</p><p>La validaci\xF3n de formularios, el consumo de APIs (m\xE9todo de comunicaci\xF3n entre dos aplicaciones), guardar datos en LocalStorage (memoria del navegador) est\xE1 dentro de las funciones que \xE9ste ejerce como Frontend.</p><figure class="kg-card kg-image-card"><img src="./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-coding.jpg" loading="lazy" class="kg-image" alt srcset="./media/blog/aprende-mas-sobre-los-frontend-developers/size-w600-2020-09-coding.jpg 600w, ./media/blog/aprende-mas-sobre-los-frontend-developers/2020-09-coding.jpg 702w"></figure><p>En LinkedIn, para que el bot\xF3n "+ Seguir" funcione se debi\xF3 haber a\xF1adido una acci\xF3n al ser presionado, al igual que este bot\xF3n, muchos de los elementos de esta plataforma tienen asociado una acci\xF3n que se debe cumplir en base a lo que el usuario realice.</p><p>Quiero recalcar que la lista de funciones es muy extensa, tanto as\xED que sale del marco de lo que es un Frontend Developer.</p><p>Hay tareas como por ejemplo guardar los datos de los usuarios en una base de datos, la comunicaci\xF3n entre usuarios en un chat, que son imposibles de hacer para un Frontend Developer, ya que son tareas del Backend Developer.</p><p>Las tecnolog\xEDas que solemos usar son HTML, CSS y Javascript. Sin embargo, nos regimos de frameworks de Javascript como Angular, React, Vue.js o Ember.js y frameworks de CSS como Bootstrap o Foundation para facilitar nuestro trabajo.</p><h2 id="-cu-l-es-mi-rea"><strong>\xBFCu\xE1l es mi \xE1rea?</strong></h2><p>Si bien es cierto que tengo conocimientos en el dise\xF1o porque s\xE9 manejar Adobe Photoshop y hago propuestas (directas en el c\xF3digo) para que una aplicaci\xF3n luzca mejor, lo que m\xE1s me apasiona es el dinamismo que pueda llegar a tener una aplicaci\xF3n, me gusta mucho ordenar datos seg\xFAn un criterio, crear buscadores para filtrar datos y, sobre todo, me gusta que cada una de las cosas, sean lo m\xE1s amigable posible para el usuario.</p><p>En conclusi\xF3n, ambas \xE1reas son de mi agrado, pero me inclino m\xE1s en el desarrollo.</p><h2 id="descubre-m-s-">Descubre m\xE1s...</h2><figure class="kg-card kg-embed-card"><iframe width="612" height="344" src="https://www.youtube.com/embed/Tl0x_zf8I78?feature=oembed" loading="lazy" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><h2 id="ya-hemos-llegado-al-final-"><strong>Ya hemos llegado al final...</strong></h2><p>Antes de finalizar quisiera que recomendaran y compartieran este contenido, para ayudar a la comunidad a aprender un poco m\xE1s sobre los Frontend Developers.</p><p>Igualmente quienes deseen dejar un comentario es bienvenido, estoy abierto a sus opiniones, criticas o sugerencias.</p><p>Muchas gracias.</p>',comment_id:"5f6624d6d10169001e91e82e",feature_image:"https://ghost.dartiles.dev/content/images/2020/09/cover.jpg",featured:!1,visibility:"public",send_email_when_published:!1,created_at:"2020-09-19T12:33:42.000-03:00",updated_at:"2020-10-07T00:00:16.000-03:00",published_at:"2017-09-16T17:00:00.000-03:00",custom_excerpt:"Descubre las diferencias entre Maquetadores y Desarrolladores Frontend \u{1F601}",codeinjection_head:null,codeinjection_foot:null,custom_template:null,canonical_url:null,tags:[{id:"5f556bcfcf1401001e663201",name:"general",slug:"general",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/general/"}],authors:[{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"}],primary_author:{id:"1",name:"Diego Artiles",slug:"dartiles",profile_image:"https://ghost.dartiles.dev/content/images/2021/09/IMG_20201007_184610_831.jpg",cover_image:null,bio:null,website:null,location:null,facebook:null,twitter:null,meta_title:null,meta_description:null,url:"https://ghost.dartiles.dev/author/dartiles/"},primary_tag:{id:"5f556bcfcf1401001e663201",name:"general",slug:"general",description:null,feature_image:null,visibility:"public",og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:null,meta_description:null,codeinjection_head:null,codeinjection_foot:null,canonical_url:null,accent_color:null,url:"https://ghost.dartiles.dev/tag/general/"},url:"https://ghost.dartiles.dev/aprende-mas-sobre-los-frontend-developers/",excerpt:"Descubre las diferencias entre Maquetadores y Desarrolladores Frontend \u{1F601}",reading_time:3,access:!0,og_image:null,og_title:null,og_description:null,twitter_image:null,twitter_title:null,twitter_description:null,meta_title:"Que es un Frontend Developer",meta_description:"Descubre que que es ser Frontend Developer, las diferencias entre un maquetador web y un dise\xF1ador web y mucho m\xE1s.",email_subject:null,createdAt:"2020-09-19T12:33:42.000-03:00",desc:"Descubre las diferencias entre Maquetadores y Desarrolladores Frontend \u{1F601}",image:"media/blog/aprende-mas-sobre-los-frontend-developers/aprende-mas-sobre-los-frontend-developers.png"}];let Re=dt;Re.forEach(e=>{e.html=e.html.replace(/^\t{3}/gm,"")});function Oe(e,t,o){const a=e.slice();return a[7]=t[o],a}function Pe(e,t,o){const a=e.slice();return a[10]=t[o],a}function xe(e){let t,o,a,l,i,m=e[0],g=[];for(let r=0;r<m.length;r+=1)g[r]=Ue(Pe(e,m,r));return{c(){t=_("div"),o=_("h3"),a=F("Temario"),l=U(),i=_("ul");for(let r=0;r<g.length;r+=1)g[r].c();this.h()},l(r){t=y(r,"DIV",{class:!0});var n=S(t);o=y(n,"H3",{class:!0});var s=S(o);a=L(s,"Temario"),s.forEach(h),l=N(n),i=y(n,"UL",{class:!0});var d=S(i);for(let q=0;q<g.length;q+=1)g[q].l(d);d.forEach(h),n.forEach(h),this.h()},h(){c(o,"class","sidebar__title svelte-17m928n"),c(i,"class","sidebar__temary-list svelte-17m928n"),c(t,"class","sidebar__temary-container")},m(r,n){te(r,t,n),u(t,o),u(o,a),u(t,l),u(t,i);for(let s=0;s<g.length;s+=1)g[s].m(i,null)},p(r,n){if(n&5){m=r[0];let s;for(s=0;s<m.length;s+=1){const d=Pe(r,m,s);g[s]?g[s].p(d,n):(g[s]=Ue(d),g[s].c(),g[s].m(i,null))}for(;s<g.length;s+=1)g[s].d(1);g.length=m.length}},d(r){r&&h(t),Se(g,r)}}}function Ue(e){let t,o,a=e[10].innerText+"",l,i,m,g;function r(){return e[6](e[10])}return{c(){t=_("li"),o=_("p"),l=F(a),i=U(),this.h()},l(n){t=y(n,"LI",{class:!0});var s=S(t);o=y(s,"P",{class:!0});var d=S(o);l=L(d,a),d.forEach(h),i=N(s),s.forEach(h),this.h()},h(){c(o,"class","sidebar__temary-item-text svelte-17m928n"),c(t,"class","sidebar__temary-item svelte-17m928n"),ie(t,"active",e[10].isActive)},m(n,s){te(n,t,s),u(t,o),u(o,l),u(t,i),m||(g=oe(t,"click",r),m=!0)},p(n,s){e=n,s&1&&a!==(a=e[10].innerText+"")&&ce(l,a),s&1&&ie(t,"active",e[10].isActive)},d(n){n&&h(t),m=!1,g()}}}function Ne(e){let t,o;return t=new at({props:{post:e[7]}}),{c(){Q(t.$$.fragment)},l(a){Y(t.$$.fragment,a)},m(a,l){$(t,a,l),o=!0},p(a,l){const i={};l&16&&(i.post=a[7]),t.$set(i)},i(a){o||(V(t.$$.fragment,a),o=!0)},o(a){W(t.$$.fragment,a),o=!1},d(a){K(t,a)}}}function ut(e){let t,o,a,l,i,m,g,r,n=e[3]&&xe(e),s=e[4],d=[];for(let v=0;v<s.length;v+=1)d[v]=Ne(Oe(e,s,v));const q=v=>W(d[v],1,1,()=>{d[v]=null});return{c(){t=_("div"),o=_("div"),n&&n.c(),a=U(),l=_("div"),i=_("h3"),m=F("Otras publicaciones"),g=U();for(let v=0;v<d.length;v+=1)d[v].c();this.h()},l(v){t=y(v,"DIV",{class:!0});var f=S(t);o=y(f,"DIV",{class:!0});var p=S(o);n&&n.l(p),a=N(p),l=y(p,"DIV",{class:!0});var j=S(l);i=y(j,"H3",{class:!0});var T=S(i);m=L(T,"Otras publicaciones"),T.forEach(h),g=N(j);for(let z=0;z<d.length;z+=1)d[z].l(j);j.forEach(h),p.forEach(h),f.forEach(h),this.h()},h(){c(i,"class","sidebar__title svelte-17m928n"),c(l,"class","post-container"),c(o,"class","sidebar__container svelte-17m928n"),ie(o,"sticky",e[1]),c(t,"class","sidebar svelte-17m928n")},m(v,f){te(v,t,f),u(t,o),n&&n.m(o,null),u(o,a),u(o,l),u(l,i),u(i,m),u(l,g);for(let p=0;p<d.length;p+=1)d[p].m(l,null);r=!0},p(v,[f]){if(v[3]?n?n.p(v,f):(n=xe(v),n.c(),n.m(o,a)):n&&(n.d(1),n=null),f&16){s=v[4];let p;for(p=0;p<s.length;p+=1){const j=Oe(v,s,p);d[p]?(d[p].p(j,f),V(d[p],1)):(d[p]=Ne(j),d[p].c(),V(d[p],1),d[p].m(l,null))}for(Ge(),p=s.length;p<d.length;p+=1)q(p);We()}f&2&&ie(o,"sticky",v[1])},i(v){if(!r){for(let f=0;f<s.length;f+=1)V(d[f]);r=!0}},o(v){d=d.filter(Boolean);for(let f=0;f<d.length;f+=1)W(d[f]);r=!1},d(v){v&&h(t),n&&n.d(),Se(d,v)}}}function mt(e,t,o){let{currentPost:a}=t,{temary:l}=t,{isStickySidebar:i}=t,{onTemaryClick:m}=t,{showTemary:g}=t,r=[];const n=s=>m(s.innerText);return e.$$set=s=>{"currentPost"in s&&o(5,a=s.currentPost),"temary"in s&&o(0,l=s.temary),"isStickySidebar"in s&&o(1,i=s.isStickySidebar),"onTemaryClick"in s&&o(2,m=s.onTemaryClick),"showTemary"in s&&o(3,g=s.showTemary)},e.$$.update=()=>{e.$$.dirty&32&&o(4,r=Re.filter(s=>s.title!==a.title).slice(0,1))},[l,i,m,g,r,a,n]}class pt extends me{constructor(t){super();pe(this,t,mt,ut,ge,{currentPost:5,temary:0,isStickySidebar:1,onTemaryClick:2,showTemary:3})}}function gt(e){let t,o,a,l,i,m,g,r,n,s,d,q,v,f,p,j,T,z;return a=new Xe({props:{size:"24",class:"twitter-icon"}}),q=new He({props:{size:"24"}}),{c(){t=_("div"),o=_("div"),Q(a.$$.fragment),l=U(),i=_("p"),m=F("Compartir"),g=U(),r=_("span"),n=F("|"),s=U(),d=_("div"),Q(q.$$.fragment),v=U(),f=_("p"),p=F("Comentar"),this.h()},l(A){t=y(A,"DIV",{class:!0});var D=S(t);o=y(D,"DIV",{class:!0});var P=S(o);Y(a.$$.fragment,P),l=N(P),i=y(P,"P",{class:!0});var b=S(i);m=L(b,"Compartir"),b.forEach(h),P.forEach(h),g=N(D),r=y(D,"SPAN",{class:!0});var I=S(r);n=L(I,"|"),I.forEach(h),s=N(D),d=y(D,"DIV",{class:!0});var M=S(d);Y(q.$$.fragment,M),v=N(M),f=y(M,"P",{class:!0});var x=S(f);p=L(x,"Comentar"),x.forEach(h),M.forEach(h),D.forEach(h),this.h()},h(){c(i,"class","social-box__social-text svelte-bz876m"),c(o,"class","social-box__twitter-container svelte-bz876m"),c(r,"class","social-box__limiter svelte-bz876m"),c(f,"class","social-box__social-text svelte-bz876m"),c(d,"class","social-box__comment-container svelte-bz876m"),c(t,"class","social-box svelte-bz876m"),ie(t,"is-floating",e[0])},m(A,D){te(A,t,D),u(t,o),$(a,o,null),u(o,l),u(o,i),u(i,m),u(t,g),u(t,r),u(r,n),u(t,s),u(t,d),$(q,d,null),u(d,v),u(d,f),u(f,p),j=!0,T||(z=[oe(o,"click",e[1]),oe(d,"click",e[2])],T=!0)},p(A,[D]){D&1&&ie(t,"is-floating",A[0])},i(A){j||(V(a.$$.fragment,A),V(q.$$.fragment,A),j=!0)},o(A){W(a.$$.fragment,A),W(q.$$.fragment,A),j=!1},d(A){A&&h(t),K(a),K(q),T=!1,Ae(z)}}}function ft(e,t,o){let a,l,{text:i}=t,{postUrl:m}=t,{hashtags:g=""}=t,{twitterUsername:r}=t,{related:n=""}=t,{commentsElement:s}=t,{isFloating:d}=t;const q=()=>{fe("social","social-toolbox","share-twitter-click");const f=600,p=400,j=(screen.width-f)/2,T=(screen.height-p)/2,z=`width=${f},height=${p},left=${j},top=${T}`;window.open(l,"_blank",z)},v=()=>{fe("social","social-toolbox","comment-click"),s.scrollIntoView({behavior:"smooth",block:"start"})};return e.$$set=f=>{"text"in f&&o(3,i=f.text),"postUrl"in f&&o(4,m=f.postUrl),"hashtags"in f&&o(5,g=f.hashtags),"twitterUsername"in f&&o(6,r=f.twitterUsername),"related"in f&&o(7,n=f.related),"commentsElement"in f&&o(8,s=f.commentsElement),"isFloating"in f&&o(0,d=f.isFloating)},e.$$.update=()=>{e.$$.dirty&248&&o(9,a=[i&&`text=${encodeURIComponent(i)}`,m&&`url=${encodeURIComponent(m)}`,g&&`hashtags=${g}`,r&&`via=${encodeURIComponent(r)}`,n&&`related=${encodeURIComponent(n)}`].filter(Boolean).join("&")),e.$$.dirty&512&&(l=`https://twitter.com/intent/tweet?${a}`)},[d,q,v,i,m,g,r,n,s,a]}class ht extends me{constructor(t){super();pe(this,t,ft,gt,ge,{text:3,postUrl:4,hashtags:5,twitterUsername:6,related:7,commentsElement:8,isFloating:0})}}const vt=()=>{let e=document,t=e.createElement("script");t.src="https://dartilesdev.disqus.com/embed.js",t.setAttribute("data-timestamp",+new Date),(e.head||e.body).appendChild(t)},bt=()=>{DISQUS.reset(),DISQUS.host._loadEmbed()},Fe={init:vt,refresh:bt},Le=()=>{Array.from(document.querySelectorAll("pre > code")).forEach(e=>{const t=e.className.replace("language-","").trim(),o=e.innerText;e.innerHTML=Prism.highlight(o,Prism.languages[t],t),e.closest("pre").setAttribute("data-lang",t)})},Ve=e=>{e.className.includes("opened")?(e.closest("figure").classList.remove("opened"),e.classList.remove("opened")):(fe("image","open-image","post-image"),e.closest("figure").classList.add("opened"),e.classList.add("opened"))},_t=e=>{const t=Array.from(e.querySelectorAll("h2"));t.forEach((o,a)=>{if(t.length>a){const l=yt(o,t[a+1]),i=document.createElement("div");i.setAttribute("data-ref",o.id),i.setAttribute("class","heading-content"),l.forEach(m=>i.appendChild(m)),e.insertBefore(i,o.nextSibling)}})},yt=(e,t,o)=>{let a=[];for(e=e.nextElementSibling;e&&!e.isEqualNode(t);){if(o&&!e.matches(o)){e=e.nextElementSibling;continue}a.push(e),e=e.nextElementSibling}return a};const{document:O,window:he}=Ze;function kt(e){var _e;let t,o,a,l,i=e[0].title+"",m,g,r,n,s,d,q=((_e=e[0].primary_author)==null?void 0:_e.name)+"",v,f,p,j,T,z=Me(e[0].published_at)+"",A,D,P,b,I,M,x,B=Ie(e[0].html)+"",J,R,G,Z=`${e[0].html}`,w,k,ae,ne,se,X,ve,be;return s=new et({props:{size:"20"}}),j=new tt({props:{size:"20"}}),M=new ot({props:{size:"20"}}),k=new ht({props:{commentsElement:e[5],text:e[0].meta_title||e[0].title,postUrl:"https://dartiles.dev/blog/"+e[0].slug,twitterUsername:"dartilesm",hashtags:e[0].primary_tag.slug,isFloating:e[3]}}),{c(){t=_("div"),o=_("div"),a=_("div"),l=_("h1"),m=F(i),g=U(),r=_("div"),n=_("span"),Q(s.$$.fragment),d=F(`
						\xA0\xA0`),v=F(q),f=F(`
					\xA0\xA0\u2022\xA0\xA0
					`),p=_("time"),Q(j.$$.fragment),T=F(`
						\xA0\xA0`),A=F(z),D=F("\xA0\xA0"),b=U(),I=_("span"),Q(M.$$.fragment),x=F(`
						\xA0\xA0`),J=F(B),R=U(),G=_("div"),w=U(),Q(k.$$.fragment),ae=U(),ne=_("div"),se=_("div"),this.h()},l(E){t=y(E,"DIV",{slot:!0});var C=S(t);o=y(C,"DIV",{class:!0,style:!0});var H=S(o);a=y(H,"DIV",{class:!0});var ee=S(a);l=y(ee,"H1",{class:!0});var ye=S(l);m=L(ye,i),ye.forEach(h),g=N(ee),r=y(ee,"DIV",{class:!0});var re=S(r);n=y(re,"SPAN",{class:!0});var de=S(n);Y(s.$$.fragment,de),d=L(de,`
						\xA0\xA0`),v=L(de,q),de.forEach(h),f=L(re,`
					\xA0\xA0\u2022\xA0\xA0
					`),p=y(re,"TIME",{class:!0,datetime:!0});var le=S(p);Y(j.$$.fragment,le),T=L(le,`
						\xA0\xA0`),A=L(le,z),D=L(le,"\xA0\xA0"),le.forEach(h),b=N(re),I=y(re,"SPAN",{class:!0});var ue=S(I);Y(M.$$.fragment,ue),x=L(ue,`
						\xA0\xA0`),J=L(ue,B),ue.forEach(h),re.forEach(h),ee.forEach(h),H.forEach(h),R=N(C),G=y(C,"DIV",{class:!0});var Be=S(G);Be.forEach(h),w=N(C),Y(k.$$.fragment,C),ae=N(C),ne=y(C,"DIV",{class:!0});var ke=S(ne);se=y(ke,"DIV",{id:!0}),S(se).forEach(h),ke.forEach(h),C.forEach(h),this.h()},h(){c(l,"class","post__title svelte-1363nm7"),c(n,"class","post__details-author svelte-1363nm7"),c(p,"class","post__details-time svelte-1363nm7"),c(p,"datetime",P=e[0].published_at),c(I,"class","post__details-reading-time svelte-1363nm7"),c(r,"class","post__details svelte-1363nm7"),c(a,"class","post__title-container svelte-1363nm7"),c(o,"class","post__image svelte-1363nm7"),ze(o,"background-image","url(/"+e[0].image+")"),c(G,"class","post__content svelte-1363nm7"),c(se,"id","disqus_thread"),c(ne,"class","post__comments svelte-1363nm7"),c(t,"slot","fr-1")},m(E,C){te(E,t,C),u(t,o),u(o,a),u(a,l),u(l,m),u(a,g),u(a,r),u(r,n),$(s,n,null),u(n,d),u(n,v),u(r,f),u(r,p),$(j,p,null),u(p,T),u(p,A),u(p,D),u(r,b),u(r,I),$(M,I,null),u(I,x),u(I,J),u(t,R),u(t,G),G.innerHTML=Z,e[12](G),u(t,w),$(k,t,null),u(t,ae),u(t,ne),u(ne,se),e[13](se),X=!0,ve||(be=oe(G,"click",e[10]),ve=!0)},p(E,C){var ee;(!X||C&1)&&i!==(i=E[0].title+"")&&ce(m,i),(!X||C&1)&&q!==(q=((ee=E[0].primary_author)==null?void 0:ee.name)+"")&&ce(v,q),(!X||C&1)&&z!==(z=Me(E[0].published_at)+"")&&ce(A,z),(!X||C&1&&P!==(P=E[0].published_at))&&c(p,"datetime",P),(!X||C&1)&&B!==(B=Ie(E[0].html)+"")&&ce(J,B),(!X||C&1)&&ze(o,"background-image","url(/"+E[0].image+")"),(!X||C&1)&&Z!==(Z=`${E[0].html}`)&&(G.innerHTML=Z);const H={};C&32&&(H.commentsElement=E[5]),C&1&&(H.text=E[0].meta_title||E[0].title),C&1&&(H.postUrl="https://dartiles.dev/blog/"+E[0].slug),C&1&&(H.hashtags=E[0].primary_tag.slug),C&8&&(H.isFloating=E[3]),k.$set(H)},i(E){X||(V(s.$$.fragment,E),V(j.$$.fragment,E),V(M.$$.fragment,E),V(k.$$.fragment,E),X=!0)},o(E){W(s.$$.fragment,E),W(j.$$.fragment,E),W(M.$$.fragment,E),W(k.$$.fragment,E),X=!1},d(E){E&&h(t),K(s),K(j),K(M),e[12](null),K(k),e[13](null),ve=!1,be()}}}function wt(e){let t,o;return t=new pt({props:{slot:"fr-2",currentPost:e[0],temary:e[1],onTemaryClick:e[9],isStickySidebar:e[2],showTemary:e[6]>992}}),{c(){Q(t.$$.fragment)},l(a){Y(t.$$.fragment,a)},m(a,l){$(t,a,l),o=!0},p(a,l){const i={};l&1&&(i.currentPost=a[0]),l&2&&(i.temary=a[1]),l&4&&(i.isStickySidebar=a[2]),l&64&&(i.showTemary=a[6]>992),t.$set(i)},i(a){o||(V(t.$$.fragment,a),o=!0)},o(a){W(t.$$.fragment,a),o=!1},d(a){K(t,a)}}}function jt(e){let t,o,a,l,i,m,g,r,n,s,d,q,v,f,p,j,T,z,A,D,P,b,I,M,x,B,J,R,G,Z;return Qe(e[11]),O.title=t=e[0].meta_title||e[0].title,J=new ct({props:{$$slots:{"fr-2":[wt],"fr-1":[kt]},$$scope:{ctx:e}}}),{c(){o=_("meta"),l=_("link"),m=_("meta"),g=_("meta"),r=_("meta"),n=_("meta"),d=_("meta"),v=_("meta"),p=_("meta"),T=_("meta"),z=_("meta"),D=_("meta"),b=_("meta"),M=_("meta"),x=_("meta"),B=U(),Q(J.$$.fragment),this.h()},l(w){const k=Ye('[data-svelte="svelte-1avrfgv"]',O.head);o=y(k,"META",{name:!0,content:!0}),l=y(k,"LINK",{rel:!0,href:!0}),m=y(k,"META",{name:!0,content:!0}),g=y(k,"META",{name:!0,content:!0}),r=y(k,"META",{name:!0,content:!0}),n=y(k,"META",{name:!0,content:!0}),d=y(k,"META",{name:!0,content:!0}),v=y(k,"META",{name:!0,content:!0}),p=y(k,"META",{property:!0,content:!0}),T=y(k,"META",{property:!0,content:!0}),z=y(k,"META",{property:!0,content:!0}),D=y(k,"META",{property:!0,content:!0}),b=y(k,"META",{property:!0,content:!0}),M=y(k,"META",{property:!0,content:!0}),x=y(k,"META",{property:!0,content:!0}),k.forEach(h),B=N(w),Y(J.$$.fragment,w),this.h()},h(){c(o,"name","description"),c(o,"content",a=e[0].meta_description||e[0].excerpt),c(l,"rel","canonical"),c(l,"href",i="https://dartiles.dev/blog/"+e[0].slug),c(m,"name","twitter:card"),c(m,"content","summary_large_image"),c(g,"name","twitter:site"),c(g,"content","@dartilesm"),c(r,"name","twitter:creator"),c(r,"content","@dartilesm"),c(n,"name","twitter:title"),c(n,"content",s=e[0].meta_title||e[0].title),c(d,"name","twitter:description"),c(d,"content",q=e[0].meta_description||e[0].excerpt),c(v,"name","twitter:image"),c(v,"content",f="https://dartiles.dev/"+e[0].image),c(p,"property","og:title"),c(p,"content",j=e[0].meta_title||e[0].title),c(T,"property","og:site_name"),c(T,"content","dartiles.dev"),c(z,"property","og:description"),c(z,"content",A=e[0].meta_description||e[0].excerpt),c(D,"property","og:image"),c(D,"content",P="https://dartiles.dev/"+e[0].image),c(b,"property","og:url"),c(b,"content",I="https://dartiles.dev/blog/"+e[0].slug),c(M,"property","og:locale"),c(M,"content","es_ES"),c(x,"property","og:type"),c(x,"content","article")},m(w,k){u(O.head,o),u(O.head,l),u(O.head,m),u(O.head,g),u(O.head,r),u(O.head,n),u(O.head,d),u(O.head,v),u(O.head,p),u(O.head,T),u(O.head,z),u(O.head,D),u(O.head,b),u(O.head,M),u(O.head,x),te(w,B,k),$(J,w,k),R=!0,G||(Z=[oe(he,"scroll",e[8]),oe(he,"resize",e[7]),oe(he,"resize",e[11])],G=!0)},p(w,[k]){(!R||k&1)&&t!==(t=w[0].meta_title||w[0].title)&&(O.title=t),(!R||k&1&&a!==(a=w[0].meta_description||w[0].excerpt))&&c(o,"content",a),(!R||k&1&&i!==(i="https://dartiles.dev/blog/"+w[0].slug))&&c(l,"href",i),(!R||k&1&&s!==(s=w[0].meta_title||w[0].title))&&c(n,"content",s),(!R||k&1&&q!==(q=w[0].meta_description||w[0].excerpt))&&c(d,"content",q),(!R||k&1&&f!==(f="https://dartiles.dev/"+w[0].image))&&c(v,"content",f),(!R||k&1&&j!==(j=w[0].meta_title||w[0].title))&&c(p,"content",j),(!R||k&1&&A!==(A=w[0].meta_description||w[0].excerpt))&&c(z,"content",A),(!R||k&1&&P!==(P="https://dartiles.dev/"+w[0].image))&&c(D,"content",P),(!R||k&1&&I!==(I="https://dartiles.dev/blog/"+w[0].slug))&&c(b,"content",I);const ae={};k&1048703&&(ae.$$scope={dirty:k,ctx:w}),J.$set(ae)},i(w){R||(V(J.$$.fragment,w),R=!0)},o(w){W(J.$$.fragment,w),R=!1},d(w){h(o),h(l),h(m),h(g),h(r),h(n),h(d),h(v),h(p),h(T),h(z),h(D),h(b),h(M),h(x),w&&h(B),K(J,w),G=!1,Ae(Z)}}}const zt=async({page:e,fetch:t})=>{const{params:o}=e,a=await t(`/blog/${o.slug}.json`),l=await a.json();if(a.ok)return{props:{post:l}};new Error(l.message)};function qt(e,t,o){let{post:a}=t,l=[],i=[],m=!1,g=!1,r,n,s,d;const q=()=>{Le(),Fe.init(),o(1,i=Array.from(r.querySelectorAll("h2")).map(b=>({innerText:b.innerText,element:b,isActive:!1}))),d>992&&p(!0)};$e(()=>{document.readyState==="complete"?q():document.addEventListener("readystatechange",async()=>document.readyState==="complete"&&q())}),nt().page.subscribe(()=>{r&&(o(1,i=Array.from(r.querySelectorAll("h2")).map(b=>({innerText:b.innerText,element:b,isActive:!1}))),s&&(s.disconnect(),d>992&&p(!0)),Fe.refresh(),Le())}),Ke(()=>{});const v=()=>d>992&&p(),f=b=>{b.forEach(I=>{const M=i.findIndex(x=>{var B;return x.element.id===((B=I.target.attributes["data-ref"])==null?void 0:B.value)});i[M]&&o(1,i[M].isActive=I.intersectionRatio>0,i)}),o(1,i=[...i])},p=b=>{(b||!document.querySelector(".heading-content"))&&_t(r),s=new IntersectionObserver(f),l=Array.from(document.querySelectorAll(".heading-content")),l.forEach(I=>s.observe(I,{threshold:1})),j()},j=()=>{const b=document.querySelector("header.header");o(2,m=window.pageYOffset>(b==null?void 0:b.offsetTop)),o(3,g=m&&(n==null?void 0:n.offsetTop)-(n==null?void 0:n.offsetHeight)>window.pageYOffset)},T=b=>{const{element:I}=i.find(M=>M.innerText===b);I.scrollIntoView({behavior:"smooth",block:"start"}),fe("post","temary","item-click")},z=b=>{b.srcElement.tagName==="IMG"?Ve(b.srcElement):b.srcElement.querySelector("img.opened")&&Ve(b.srcElement.querySelector("img.opened"))};function A(){o(6,d=he.innerWidth)}function D(b){De[b?"unshift":"push"](()=>{r=b,o(4,r)})}function P(b){De[b?"unshift":"push"](()=>{n=b,o(5,n)})}return e.$$set=b=>{"post"in b&&o(0,a=b.post)},[a,i,m,g,r,n,d,v,j,T,z,A,D,P]}class Dt extends me{constructor(t){super();pe(this,t,qt,jt,ge,{post:0})}}export{Dt as default,zt as load};
